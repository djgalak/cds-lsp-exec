"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const trace_1 = require("./trace");
class EmergencyHooks {
    constructor(trace = trace_1.currentTrace()) {
        this.trace = trace;
        this.emergencyHooksInstalled = false;
    }
    setupEmergencyHooks() {
        if (this.emergencyHooksInstalled) {
            return;
        }
        this.emergencyHooksInstalled = true;
        process.on('uncaughtException', e => this.onUncaughtException(e));
        process.on('unhandledRejection', (reason, p) => this.onUnhandledRejection(reason, p));
        process.on('exit', code => this.onExit(code));
        process.on('warning', warning => this.onWarning(warning));
    }
    onUncaughtException(e) {
        this.trace.conditionalTrace(trace_1.LspTraceComponent.UTIL, trace_1.LspTraceLevel.ERROR, 'SEVERE: uncaughtException: ', e);
    }
    onUnhandledRejection(reason, promise) {
        this.trace.conditionalTrace(trace_1.LspTraceComponent.UTIL, trace_1.LspTraceLevel.ERROR, `Unhandled Rejection at: ${promise} reason: ${reason}`);
    }
    onExit(code) {
        this.trace.conditionalTrace(trace_1.LspTraceComponent.UTIL, trace_1.LspTraceLevel.INFRASTRUCTURE, `CDS-LS will exit now with code ${code}`);
    }
    onWarning(warning) {
        this.trace.doTraceToFile(this.trace.renderMessage(trace_1.LspTraceLevel.INFRASTRUCTURE, trace_1.LspTraceComponent.UTIL, `Process warning (${warning.name}): ${warning.message}\n${warning.stack}\n`));
    }
}
exports.EmergencyHooks = EmergencyHooks;
//# sourceMappingURL=EmergencyHooks.js.map