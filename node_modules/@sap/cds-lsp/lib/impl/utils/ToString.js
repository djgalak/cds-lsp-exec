"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LSP = require("vscode-languageserver-protocol");
const trace_1 = require("./trace");
function renderRange(range) {
    return safe(range, () => `[${range.start.line}:${range.start.character}-${range.end.line}:${range.end.character}]`);
}
exports.renderRange = renderRange;
function renderKind(kind) {
    return safe(kind, () => {
        switch (kind) {
            case LSP.DocumentHighlightKind.Text: return 'text';
            case LSP.DocumentHighlightKind.Read: return 'read';
            case LSP.DocumentHighlightKind.Write: return 'writ';
            default: return '[E] <unknown kind> ' + kind;
        }
    });
}
exports.renderKind = renderKind;
function renderPos(position) {
    return safe(position, () => `[${position.line}:${position.character}]`);
}
exports.renderPos = renderPos;
function renderHov(h) {
    return safe(h, () => `${h.range ? renderRange(h.range) : ''}: ${renderContents(h.contents)}]`);
}
exports.renderHov = renderHov;
function shorten(s, maxLength = 70) {
    return JSON.stringify(s.length <= maxLength ? s : s.substr(0, maxLength - 3) + '...');
}
exports.shorten = shorten;
function renderContents(h) {
    return safe(h, () => {
        if (LSP.MarkupContent.is(h)) {
            return `${h.kind}: ${shorten(h.value)}`;
        }
        const renderMarkedString = (ms) => {
            if (typeof ms === 'string') {
                return shorten(ms);
            }
            return `[${ms.language}] ${shorten(ms.value)}`;
        };
        if (Array.isArray(h)) {
            return arr(h.map(renderMarkedString));
        }
        else {
            return renderMarkedString(h);
        }
    });
}
exports.renderContents = renderContents;
function renderWorkspaceEdit(we) {
    return safe(we, () => JSON.stringify(we));
}
exports.renderWorkspaceEdit = renderWorkspaceEdit;
function renderTextEdits(edits) {
    return safe(edits, () => `${arr(edits.map(e => `'${e.newText.replace(/\n/g, '\\n')}'${renderRange(e.range)}`))}`);
}
exports.renderTextEdits = renderTextEdits;
function renderCodeAction(x) {
    return safe(x, () => `${x.textDocument.uri} ${renderRange(x.range)}`);
}
exports.renderCodeAction = renderCodeAction;
function renderChangeTextDoc(x) {
    return safe(x, () => `${x.textDocument.uri}#${x.textDocument.version} ${arr(x.contentChanges.map(renderTextDocConChEv))}`);
}
exports.renderChangeTextDoc = renderChangeTextDoc;
function isIncremental(x) {
    var _a;
    return (_a = x) === null || _a === void 0 ? void 0 : _a.range;
}
function renderTextDocConChEv(x) {
    return safe(x, () => { var _a; return `${isIncremental(x) ? renderRange(x.range) : ''} ${renderExists((_a = x) === null || _a === void 0 ? void 0 : _a.rangeLength)} ${shorten(x.text, 20)}`; });
}
function renderDocClosed(x) {
    return safe(x, () => x.textDocument.uri);
}
exports.renderDocClosed = renderDocClosed;
function renderDocOpened(x) {
    return safe(x, () => `${x.textDocument.uri}#${x.textDocument.version} ${shorten(x.textDocument.text, 30)}`);
}
exports.renderDocOpened = renderDocOpened;
function renderDocSaved(x) {
    return safe(x, () => `${x.textDocument.uri}#${x.textDocument.version}`);
}
exports.renderDocSaved = renderDocSaved;
function renderDocWillSave(x) {
    return safe(x, () => `${x.reason} ${x.textDocument.uri}`);
}
exports.renderDocWillSave = renderDocWillSave;
function renderExecCmd(x) {
    return safe(x, () => `${x.command}(${JSON.stringify(x.arguments)})`);
}
exports.renderExecCmd = renderExecCmd;
function renderAsIs(x) {
    return safe(x, () => trace_1.stringifyJson(x));
}
exports.renderAsIs = renderAsIs;
function renderCompiledFile(r) {
    if (!r) {
        return '';
    }
    const deps = Object.values(r.dependentUris);
    return `{${deps.length ? '\n\tdeps: ' + arr(deps, '\t') : ''}\n\tdiagsHash: ${r.diagnosticsHash}${r.diagnostics.length ? '\n\tdiags: ' + renderDiagsWithIndent(r.diagnostics, '\t') : ''}\n}`;
}
exports.renderCompiledFile = renderCompiledFile;
function renderDiagsMap(l) {
    return safe(l, () => arr(Object.entries(l).map(([uri, x]) => `${uri}: ${renderDiagsWithIndent(x, '   ')})`)));
}
exports.renderDiagsMap = renderDiagsMap;
function renderNothing() {
    return '';
}
exports.renderNothing = renderNothing;
function ignoreReject(errorKind, e, prefix, tracer) {
    if (errorKind === trace_1.ErrorKind.Rejected) {
        tracer.info(prefix);
    }
    else {
        tracer.error(`${prefix} => ${e.stack || e}`);
    }
    throw e;
}
exports.ignoreReject = ignoreReject;
function catchAndTrace(errorKind, e, prefix, tracer) {
    tracer.error(`${prefix} => ${e.stack || e}`);
}
exports.catchAndTrace = catchAndTrace;
function renderCommands(l) {
    return safe(l, () => arr(l.map(x => `${x.title}: ${x.command}(${trace_1.stringifyJson(x.arguments)})`)));
}
exports.renderCommands = renderCommands;
const FileChangeTypes = {
    [LSP.FileChangeType.Created]: 'Created',
    [LSP.FileChangeType.Deleted]: 'Deleted',
    [LSP.FileChangeType.Changed]: 'Changed'
};
function renderChangeWatched(l) {
    return safe(l, () => arr(l.changes.map(x => `${FileChangeTypes[x.type] || x.type} ${x.uri})`)));
}
exports.renderChangeWatched = renderChangeWatched;
function renderExists(x) {
    return x !== undefined ? x : '';
}
function renderSeverity(x) {
    if (x !== undefined) {
        switch (x) {
            case LSP.DiagnosticSeverity.Error: return 'Error';
            case LSP.DiagnosticSeverity.Warning: return 'Warn';
            case LSP.DiagnosticSeverity.Information: return 'Info';
            case LSP.DiagnosticSeverity.Hint: return 'Hint';
        }
    }
    return '?';
}
function renderDiags(l) {
    return renderDiagsWithIndent(l);
}
exports.renderDiags = renderDiags;
function renderDiagsWithIndent(l, indent = '') {
    return safe(l, () => arr(l.map(x => `${renderSeverity(x.severity)} ${renderRange(x.range)}: ${x.message}`), indent));
}
exports.renderDiagsWithIndent = renderDiagsWithIndent;
function renderLocations(l) {
    return safe(l, () => arr(l.map(renderLocation)));
}
exports.renderLocations = renderLocations;
function renderLocation(x) {
    return `${x.uri} ${renderRange(x.range)}`;
}
exports.renderLocation = renderLocation;
function renderTextPos(textPos) {
    return safe(textPos, () => `${textPos.textDocument.uri} ${renderPos(textPos.position)}`);
}
exports.renderTextPos = renderTextPos;
function renderDocumentLinkParams(link) {
    return safe(link, () => `${link.textDocument.uri}`);
}
exports.renderDocumentLinkParams = renderDocumentLinkParams;
function renderDocumentLinks(links) {
    return safe(links, () => arr(links.map(renderDocumentLink)));
}
exports.renderDocumentLinks = renderDocumentLinks;
function renderDocumentLink(link) {
    return safe(link, () => `${link.data}@${renderPos(link.range.start)} -> ${link.target}`);
}
exports.renderDocumentLink = renderDocumentLink;
function renderDocHighlights(hl) {
    return safe(hl, () => arr(hl.map(h => `${renderKind(h.kind)}: ${renderRange(h.range)}`)));
}
exports.renderDocHighlights = renderDocHighlights;
function renderSymbolInfos(sis) {
    return safe(sis, () => arr(sis.map(si => `${renderRange(si.location.range).padEnd(14)} ${('' + si.kind).padStart(2)} ${si.name.padEnd(20)} (${(si.containerName || '/')})`)));
}
exports.renderSymbolInfos = renderSymbolInfos;
function renderSymbolInfos_Uri(sis) {
    return safe(sis, () => arr(sis.map(si => `${('' + si.kind).padStart(2)} ${('(' + (si.containerName || '/') + ')').padEnd(40)} ${si.name.padEnd(20)} ${renderRange(si.location.range).padEnd(14)} ${si.location.uri}`)));
}
exports.renderSymbolInfos_Uri = renderSymbolInfos_Uri;
function renderCompletionItem(x) {
    let docs = '';
    if (x && x.documentation) {
        docs = LSP.MarkupContent.is(x.documentation) ? x.documentation.value : x.documentation;
    }
    return safe(x, () => `${x.label} [${x.commitCharacters || ''}] ${shorten(docs)}`);
}
exports.renderCompletionItem = renderCompletionItem;
function renderCompletionList(x) {
    return safe(x, () => `${x.isIncomplete ? 'incomplete' : ''} ${arr(x.items.map(renderCompletionItem))}`);
}
exports.renderCompletionList = renderCompletionList;
function renderDocSymbol(d) {
    return safe(d, () => d.textDocument.uri);
}
exports.renderDocSymbol = renderDocSymbol;
function renderRef(d) {
    return safe(d, () => `${d.textDocument.uri} ${renderPos(d.position)} ${d.context.includeDeclaration ? 'withDecl' : ''}`);
}
exports.renderRef = renderRef;
function renderWsSymbol(d) {
    return safe(d, () => d.query);
}
exports.renderWsSymbol = renderWsSymbol;
function renderUris(uris = []) {
    const folderToBaseNames = {};
    for (const uri of uris) {
        const basePathIndex = uri.lastIndexOf('/') + 1;
        const folderUri = uri.slice(0, basePathIndex);
        const basename = uri.slice(basePathIndex);
        const baseNames = folderToBaseNames[folderUri] || (folderToBaseNames[folderUri] = []);
        baseNames.push(basename);
    }
    let result = '';
    for (const folderUri of Object.keys(folderToBaseNames).sort()) {
        const baseNames = folderToBaseNames[folderUri];
        if (baseNames.length === 1) {
            result += `\n${folderUri}${baseNames[0]}`;
        }
        else {
            result += `\n${folderUri}\n  `;
            let i = 0;
            baseNames.sort();
            baseNames.forEach(basename => result += `${basename.padEnd(30)} ${++i % 5 === 0 ? '\n  ' : ''}`);
        }
    }
    return result;
}
exports.renderUris = renderUris;
function arr(x, indent = '') {
    if (!x) {
        return '';
    }
    if (!x.length) {
        return '[]';
    }
    return x.reduce((s, i) => `${s}\n${indent}   ${i}`, '[') + `\n${indent}]`;
}
exports.arr = arr;
function safe(x, render) {
    if (x === undefined) {
        return '';
    }
    try {
        return render();
    }
    catch (e) {
        return trace_1.stringifyJson(x);
    }
}
//# sourceMappingURL=ToString.js.map