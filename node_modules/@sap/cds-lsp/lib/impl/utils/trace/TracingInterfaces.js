"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Ansi_1 = require("./Ansi");
var ErrorKind;
(function (ErrorKind) {
    ErrorKind["Thrown"] = "THROWN";
    ErrorKind["Rejected"] = "REJECTED";
})(ErrorKind = exports.ErrorKind || (exports.ErrorKind = {}));
var LspTraceLevel;
(function (LspTraceLevel) {
    LspTraceLevel[LspTraceLevel["invalid"] = 0] = "invalid";
    LspTraceLevel[LspTraceLevel["OFF"] = 1] = "OFF";
    LspTraceLevel[LspTraceLevel["INFRASTRUCTURE"] = 2] = "INFRASTRUCTURE";
    LspTraceLevel[LspTraceLevel["ERROR"] = 3] = "ERROR";
    LspTraceLevel[LspTraceLevel["WARNING"] = 4] = "WARNING";
    LspTraceLevel[LspTraceLevel["INFO"] = 5] = "INFO";
    LspTraceLevel[LspTraceLevel["VERBOSE"] = 6] = "VERBOSE";
    LspTraceLevel[LspTraceLevel["DEBUG"] = 7] = "DEBUG";
})(LspTraceLevel = exports.LspTraceLevel || (exports.LspTraceLevel = {}));
var LspTraceComponent;
(function (LspTraceComponent) {
    LspTraceComponent["ALL"] = "*";
    LspTraceComponent["ADAPTER"] = "adapter";
    LspTraceComponent["COMPLETION"] = "completion";
    LspTraceComponent["DOCUMENTATION"] = "docs";
    LspTraceComponent["FORMATTING"] = "format";
    LspTraceComponent["MODEL"] = "model";
    LspTraceComponent["REFACTOR"] = "refactor";
    LspTraceComponent["REQUESTS"] = "requests";
    LspTraceComponent["UTIL"] = "util";
    LspTraceComponent["WORKSPACE"] = "workspace";
    LspTraceComponent["FILES"] = "files";
})(LspTraceComponent = exports.LspTraceComponent || (exports.LspTraceComponent = {}));
exports.MESSAGE_INCOMING = '---> ';
exports.MESSAGE_OUTGOING = '<--- ';
function highlight(s, { errorPredicate = false, warnPredicate = false, infoPredicate = false, successPredicate = false, debugPredicate = false }) {
    if (errorPredicate) {
        return `${Ansi_1.Ansi.ERROR}${s}${Ansi_1.Ansi.RESET}`;
    }
    if (warnPredicate) {
        return `${Ansi_1.Ansi.WARN}${s}${Ansi_1.Ansi.RESET}`;
    }
    if (successPredicate) {
        return `${Ansi_1.Ansi.SUCCESS}${s}${Ansi_1.Ansi.RESET}`;
    }
    if (infoPredicate) {
        return `${Ansi_1.Ansi.INFO}${s}${Ansi_1.Ansi.RESET}`;
    }
    if (debugPredicate) {
        return `${Ansi_1.Ansi.Foreground.DARKGREY}${s}${Ansi_1.Ansi.RESET}`;
    }
    return s;
}
exports.highlight = highlight;
class NoTracer {
    constructor() {
        this.warnPrinted = false;
    }
    printWarning() {
        if (!this.warnPrinted) {
            this.warnPrinted = true;
            console.error('NoTracer was used!!!');
        }
    }
    isTracing(level) {
        this.printWarning();
        return false;
    }
    log(m, x) {
        this.printWarning();
    }
    error(m, x) { this.log(m, x); }
    warn(m, x) { this.log(m, x); }
    info(m, x) { this.log(m, x); }
    verbose(m, x) { this.log(m, x); }
    debug(m, x) { this.log(m, x); }
    customizedFootprint(action, args, customizer, thisArg) {
        return action(...args);
    }
    footprint(scope, action, args = []) {
        return this.customizedFootprint(action, args, { scope });
    }
    tryCatch(cb, traceLevel, traceTitle, fallbackResult) {
        try {
            return cb();
        }
        catch (e) {
            this.log(`Failed: ${traceTitle}: ${e.stack || e}`);
        }
        return fallbackResult;
    }
}
exports.NoTracer = NoTracer;
//# sourceMappingURL=TracingInterfaces.js.map