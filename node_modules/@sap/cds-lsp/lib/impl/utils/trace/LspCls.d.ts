import { ClsFrame } from './ContinuationLocalStorage';
import { LspStats } from './LspStats';
import { ITrace } from './TracingInterfaces';
export declare class IoCFactory {
    private typeToFactoryMethod;
    register<T>(s: symbol, f: () => T): void;
    newInstance<T>(s: symbol): T;
}
export declare class LspClsAppScope {
    trace: ITrace;
    iocFactory?: IoCFactory;
    stats: LspStats;
}
export declare class LspClsRequestScope {
    readonly name: string;
    readonly requestNumber: number;
    constructor(name: string, requestNumber: number);
    dirtyModels: number;
    compilations: number;
    compiledFiles: number;
    compiledSourceLength: number;
    compilationElapsedMillis: number;
}
export declare class LspClsFrameScope {
    indentLevel: number;
    constructor(indentLevel?: number);
}
declare class LspClsFrame extends ClsFrame {
    appScope: LspClsAppScope;
    requestScope: LspClsRequestScope;
    frameScope: LspClsFrameScope;
    constructor(asyncId: number, appScope: LspClsAppScope, requestScope: LspClsRequestScope, frameScope: LspClsFrameScope);
}
export declare const currentFrame: () => LspClsFrame;
export declare const currentTrace: () => ITrace;
export declare const startAppScope: (trace: ITrace, factory?: IoCFactory) => void;
export declare const startRequestScope: (name: string, requestNumber?: number) => void;
export declare function endRequestScope(): void;
export {};
