"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LspCls_1 = require("./LspCls");
const Stopwatch_1 = require("./Stopwatch");
const Stringify_1 = require("./Stringify");
const TracingInterfaces_1 = require("./TracingInterfaces");
function Footprint(traceComponent, customizer = {}) {
    return (target, method, descriptor) => {
        const originalMethod = descriptor.value;
        if (!customizer.scope) {
            customizer.scope = method;
        }
        descriptor.value = function FootprintDecorator(...args) {
            const trace = LspCls_1.currentTrace();
            const tracer = trace.tracer(traceComponent);
            return tracer.customizedFootprint(originalMethod.bind(this), args, customizer, this);
        };
        return descriptor;
    };
}
exports.Footprint = Footprint;
var LspOperatingState;
(function (LspOperatingState) {
    LspOperatingState[LspOperatingState["Operating"] = 1] = "Operating";
    LspOperatingState[LspOperatingState["Shutdown"] = 2] = "Shutdown";
    LspOperatingState[LspOperatingState["Ignore"] = 3] = "Ignore";
})(LspOperatingState = exports.LspOperatingState || (exports.LspOperatingState = {}));
let lspOperatingState = LspOperatingState.Shutdown;
exports.FIRST_ARGUMENT = 'FIRST_ARGUMENT';
function RequestMethod(cfg) {
    return (target, method, descriptor) => {
        const originalMethod = descriptor.value;
        descriptor.value = function RequestMethodDecorator(...args) {
            LspCls_1.startRequestScope(method);
            const trace = LspCls_1.currentTrace();
            const tracer = trace.tracer(TracingInterfaces_1.LspTraceComponent.REQUESTS);
            const expectedState = cfg.expectedState || LspOperatingState.Operating;
            if (expectedState !== LspOperatingState.Ignore) {
                if (expectedState !== lspOperatingState) {
                    tracer.warn(() => `Method ${method} was unexpectedly called even server is currently ${LspOperatingState[lspOperatingState]}`);
                }
            }
            const newState = cfg.newState || LspOperatingState.Operating;
            if (newState !== lspOperatingState) {
                LspCls_1.currentTrace().conditionalTrace(TracingInterfaces_1.LspTraceComponent.REQUESTS, TracingInterfaces_1.LspTraceLevel.INFRASTRUCTURE, `Changing operating state from ${LspOperatingState[lspOperatingState]} to ${LspOperatingState[newState]}`);
                lspOperatingState = newState;
            }
            return tracer.customizedFootprint(originalMethod.bind(this), args, {
                finallyDo: LspCls_1.endRequestScope,
                startScope: TracingInterfaces_1.MESSAGE_INCOMING + method,
                endScope: TracingInterfaces_1.MESSAGE_OUTGOING + method,
                argumentsRenderer: x => cfg.paramsRenderer(x[0]),
                resultRenderer: (res) => {
                    const statistics = LspCls_1.currentFrame().requestScope;
                    const stats = statistics.compilations
                        ? `{${statistics.dirtyModels} dirty model(s), ${statistics.compilations} compilation(s), ${statistics.compiledFiles} file(s), ${statistics.compiledSourceLength} bytes of sources, ${Stopwatch_1.renderElapsed(statistics.compilationElapsedMillis)} compilation time}`
                        : '';
                    return `${stats} ${cfg.resultRenderer(res)}`;
                },
                errorHandler: ((errorKind, e, prefix) => {
                    const res = cfg.onErrorReturn !== exports.FIRST_ARGUMENT
                        ? cfg.onErrorReturn
                        : args === null || args === void 0 ? void 0 : args[0];
                    tracer.error(() => `${prefix} => ${e}\nRETURNING: ${Stringify_1.stringifyJson(res, '')}`);
                    return res;
                }),
                trackMemory: cfg.trackMemory !== undefined
                    ? cfg.trackMemory
                    : true
            }, target);
        };
        return descriptor;
    };
}
exports.RequestMethod = RequestMethod;
//# sourceMappingURL=Footprint.js.map