import { Callback, FootprintCustomizer, ITracer, LspTraceComponent, LspTraceLevel, TraceMessage, TracerAdapter } from './TracingInterfaces';
export declare class Tracer implements ITracer {
    private component;
    private tracerAdapter;
    constructor(component: LspTraceComponent, tracerAdapter: TracerAdapter);
    isTracing(level: LspTraceLevel): boolean;
    debug(m: TraceMessage, x?: any): void;
    verbose(m: TraceMessage, x?: any): void;
    info(m: TraceMessage, x?: any): void;
    warn(m: TraceMessage, x?: any): void;
    error(m: TraceMessage, x?: any): void;
    footprint<T, R>(scope: string, action: Callback<R>, args: any[]): R;
    customizedFootprint<T, R>(action: Callback<R>, args?: any[], customizerOrScope?: FootprintCustomizer<T, R> | string, target?: T): R;
    conditionalTrace(component: LspTraceComponent, level: LspTraceLevel, message: string, x?: any): void;
    tryCatch<R>(cb: () => R, traceLevel: LspTraceLevel, traceTitle: string | (() => string), fallbackResult?: R): R;
}
