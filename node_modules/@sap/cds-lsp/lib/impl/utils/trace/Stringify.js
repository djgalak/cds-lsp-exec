"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function stringifyJson(node, renderUndefinedAs = '"<undefined>"') {
    function _stringify(node, indent = '', cache = new Map(), path = '/') {
        const subIndent = indent + '   ';
        let output = '';
        try {
            const perform = function () {
                if (node === null) {
                    output += '"<null>"';
                    return;
                }
                if (node === undefined) {
                    output += renderUndefinedAs;
                    return;
                }
                if (typeof node === 'string') {
                    output += '"' + node.replace(/\n/g, '\\n')
                        .replace(/\t/g, '\\t')
                        .replace(/\\/g, '\\\\')
                        + '"';
                    return;
                }
                if (typeof node === 'number') {
                    output += isNaN(node) ? '"<NaN>"' : node;
                    return;
                }
                if (typeof node === 'boolean') {
                    output += node;
                    return;
                }
                if (typeof node === 'function') {
                    output += '"<function()>"';
                    return;
                }
                if (Array.isArray(node)) {
                    if (node.length === 0) {
                        output += '[]';
                        return;
                    }
                    output += '[';
                    const nLastChild = node.length - 1;
                    node.forEach((childNode, index) => {
                        output += _stringify(childNode, subIndent, cache, path + '[' + index + ']');
                        if (index < nLastChild) {
                            output += ',';
                        }
                    });
                    output += '\n' + indent + ']';
                    return;
                }
                if (typeof node === 'object') {
                    const foundItem = cache.get(node);
                    if (foundItem !== undefined) {
                        let c = '' + node.constructor;
                        if (node.constructor) {
                            c = c.slice('function '.length, c.indexOf('('));
                        }
                        const output1 = `[Circular ${c}:${foundItem}]`;
                        output += `"${output1.replace(/["\\]/g, '\\$&')}"`;
                        return;
                    }
                    cache.set(node, path);
                    output += '{';
                    const keys = Object.keys(node);
                    if (keys.length === 0) {
                        output += '}';
                        return;
                    }
                    const nLastKey = keys.length - 1;
                    keys.forEach((key, index) => {
                        output += '\n' + subIndent + '"' + key.replace(/["\\]/g, '\\$&') + '"' + ': ';
                        output += _stringify(node[key], subIndent, cache, path + key + '/');
                        if (index < nLastKey) {
                            output += ',';
                        }
                    });
                    output += '\n' + indent + '}';
                    return;
                }
                output += '"<<?????>>"';
            };
            perform();
        }
        catch (e) {
            output += '"<<ERROR>>"';
        }
        return output;
    }
    return _stringify(node);
}
exports.stringifyJson = stringifyJson;
function errorStack(e) {
    return (e === null || e === void 0 ? void 0 : e.stack) || e;
}
exports.errorStack = errorStack;
//# sourceMappingURL=Stringify.js.map