"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ContinuationLocalStorage_1 = require("./ContinuationLocalStorage");
const LspStats_1 = require("./LspStats");
const TracingInterfaces_1 = require("./TracingInterfaces");
class IoCFactory {
    constructor() {
        this.typeToFactoryMethod = new Map();
    }
    register(s, f) {
        this.typeToFactoryMethod.set(s, f);
    }
    newInstance(s) {
        var _a;
        return (_a = this.typeToFactoryMethod.get(s)) === null || _a === void 0 ? void 0 : _a();
    }
}
exports.IoCFactory = IoCFactory;
class LspClsAppScope {
}
exports.LspClsAppScope = LspClsAppScope;
class LspClsRequestScope {
    constructor(name, requestNumber) {
        this.name = name;
        this.requestNumber = requestNumber;
        this.dirtyModels = 0;
        this.compilations = 0;
        this.compiledFiles = 0;
        this.compiledSourceLength = 0;
        this.compilationElapsedMillis = 0;
    }
}
exports.LspClsRequestScope = LspClsRequestScope;
class LspClsFrameScope {
    constructor(indentLevel = 0) {
        this.indentLevel = indentLevel;
    }
}
exports.LspClsFrameScope = LspClsFrameScope;
class LspClsFrame extends ContinuationLocalStorage_1.ClsFrame {
    constructor(asyncId, appScope, requestScope, frameScope) {
        super(asyncId);
        this.appScope = appScope;
        this.requestScope = requestScope;
        this.frameScope = frameScope;
    }
}
const noTracer = new TracingInterfaces_1.NoTracer();
const noTrace = {
    configure() { },
    tracer() { return noTracer; },
    conditionalTrace() { },
    doTraceToFile() { },
    renderMessage() { return ''; },
    addTelemetry() { }
};
class LspFrameFactory {
    constructor() {
        this.appScope = {
            trace: noTrace,
            stats: new LspStats_1.LspStats()
        };
    }
    createFrame(asyncId, previousFrame) {
        if (!previousFrame) {
            return new LspClsFrame(asyncId, this.appScope, new LspClsRequestScope('<fromScratch>', -asyncId), new LspClsFrameScope());
        }
        else {
            return new LspClsFrame(asyncId, previousFrame.appScope, previousFrame.requestScope, new LspClsFrameScope(previousFrame.frameScope.indentLevel));
        }
    }
}
const lspFrameFactory = new LspFrameFactory();
const CLS = new ContinuationLocalStorage_1.ContinuationLocalStorage(lspFrameFactory);
exports.currentFrame = () => CLS.currentFrame();
exports.currentTrace = () => exports.currentFrame().appScope.trace;
exports.startAppScope = (trace, factory) => {
    lspFrameFactory.appScope.trace = trace;
    lspFrameFactory.appScope.iocFactory = factory;
    const frame = exports.currentFrame();
    frame.appScope.trace = trace;
    frame.appScope.iocFactory = factory;
};
let __nextRequestNumber = 1;
exports.startRequestScope = (name, requestNumber = __nextRequestNumber++) => {
    const frame = exports.currentFrame();
    frame.requestScope = new LspClsRequestScope(name, requestNumber);
    frame.frameScope = new LspClsFrameScope();
};
function endRequestScope() {
    const frame = exports.currentFrame();
    frame.requestScope = new LspClsRequestScope('@' + frame.requestScope.name, frame.requestScope.requestNumber);
}
exports.endRequestScope = endRequestScope;
//# sourceMappingURL=LspCls.js.map