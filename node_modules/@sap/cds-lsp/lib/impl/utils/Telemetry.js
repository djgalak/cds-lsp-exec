"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ToString_1 = require("./ToString");
const trace_1 = require("./trace");
class Telemetry {
    constructor(trace) {
        this.trace = trace;
        this.telemetryEnabled = false;
    }
    enable(firstTelegramAfter = 5000, repetitionTimeSpan = 60000) {
        if (this.telemetryEnabled) {
            return;
        }
        this.telemetryEnabled = true;
        this.intervalToken = setTimeout(async () => {
            const stats = trace_1.currentFrame().appScope.stats;
            this.trace.addTelemetry(await stats.healthStats());
            this.intervalToken = setInterval(async () => {
                this.trace.addTelemetry(await stats.healthStats());
            }, repetitionTimeSpan);
        }, firstTelegramAfter);
    }
    disable() {
        this.telemetryEnabled = false;
        if (this.intervalToken) {
            clearInterval(this.intervalToken);
            this.intervalToken = undefined;
        }
    }
}
__decorate([
    trace_1.Footprint(trace_1.LspTraceComponent.UTIL, { errorHandler: ToString_1.catchAndTrace })
], Telemetry.prototype, "enable", null);
exports.Telemetry = Telemetry;
//# sourceMappingURL=Telemetry.js.map