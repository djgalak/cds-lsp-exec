import * as LSP from 'vscode-languageserver-protocol';
import { DiagnosticsState } from './CompilerInterfaces';
import { ErrorKind, ITracer } from './trace';
export declare function renderRange(range: LSP.Range): string;
export declare function renderKind(kind?: LSP.DocumentHighlightKind): string;
export declare function renderPos(position: LSP.Position): string;
export declare function renderHov(h: LSP.Hover): string;
export declare function shorten(s: string, maxLength?: number): string;
export declare function renderContents(h: LSP.MarkupContent | LSP.MarkedString | LSP.MarkedString[]): string;
export declare function renderWorkspaceEdit(we: LSP.WorkspaceEdit): string;
export declare function renderTextEdits(edits: LSP.TextEdit[]): string;
export declare function renderCodeAction(x: LSP.CodeActionParams): string;
export declare function renderChangeTextDoc(x: LSP.DidChangeTextDocumentParams): string;
export declare function renderDocClosed(x: LSP.DidCloseTextDocumentParams): string;
export declare function renderDocOpened(x: LSP.DidOpenTextDocumentParams): string;
export declare function renderDocSaved(x: LSP.DidSaveTextDocumentParams): string;
export declare function renderDocWillSave(x: LSP.WillSaveTextDocumentParams): string;
export declare function renderExecCmd(x: LSP.ExecuteCommandParams): string;
export declare function renderAsIs(x: any): string;
export declare function renderCompiledFile(r: DiagnosticsState): string;
export declare function renderDiagsMap(l: {
    [uri: string]: LSP.Diagnostic[];
}): string;
export declare function renderNothing(): string;
export declare function ignoreReject(errorKind: ErrorKind, e: any, prefix: string, tracer: ITracer): void;
export declare function catchAndTrace(errorKind: ErrorKind, e: any, prefix: string, tracer: ITracer): void;
export declare function renderCommands(l: LSP.Command[]): string;
export declare function renderChangeWatched(l: LSP.DidChangeWatchedFilesParams): string;
export declare function renderDiags(l: LSP.Diagnostic[]): string;
export declare function renderDiagsWithIndent(l: LSP.Diagnostic[], indent?: string): string;
export declare function renderLocations(l: LSP.Location[]): string;
export declare function renderLocation(x: LSP.Location): string;
export declare function renderTextPos(textPos: LSP.TextDocumentPositionParams): string;
export declare function renderDocumentLinkParams(link: LSP.DocumentLinkParams): string;
export declare function renderDocumentLinks(links: LSP.DocumentLink[]): string;
export declare function renderDocumentLink(link: LSP.DocumentLink): string;
export declare function renderDocHighlights(hl: LSP.DocumentHighlight[]): string;
export declare function renderSymbolInfos(sis: LSP.SymbolInformation[]): string;
export declare function renderSymbolInfos_Uri(sis: LSP.SymbolInformation[]): string;
export declare function renderCompletionItem(x: LSP.CompletionItem): string;
export declare function renderCompletionList(x: LSP.CompletionList): string;
export declare function renderDocSymbol(d: LSP.DocumentSymbolParams): string;
export declare function renderRef(d: LSP.ReferenceParams): string;
export declare function renderWsSymbol(d: LSP.WorkspaceSymbolParams): string;
export declare function renderUris(uris?: string[]): string;
export declare function arr(x: any[], indent?: string): string;
