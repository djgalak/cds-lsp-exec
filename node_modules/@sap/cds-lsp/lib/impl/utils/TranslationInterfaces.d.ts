import * as LSP from 'vscode-languageserver-protocol';
import { ExtractedCdsEnv } from './cdsenv/ExtractedCdsEnv';
export interface Translation {
    uri: string;
    line: number;
    character: number;
    id: string;
    text: string;
}
export declare type TranslationMap = Map<string, Translation>;
export interface TranslatedString {
    foundTranslation: boolean;
    text: string;
}
export interface ThingDocumentation {
    title?: TranslatedString;
    description?: TranslatedString;
}
export interface ITranslationBroker {
    getTranslation(translationId: string): Translation | undefined;
    fetchAllTranslations(sourceFileUri: string): Promise<Translation[]>;
    onTranslationFileChanged(cdsEnv: ExtractedCdsEnv, uri: string, content?: string): void;
    fetchMostRelevantTranslationFileUris(forSourceUri: string): Promise<string[]>;
    fetchTranslationIndex(translationFileUri: string): Promise<I18nIndex>;
    reset(): void;
}
export interface MaintainTranslationArg {
    sourceFileUri: string;
    translationFileUri: string;
    tID: string;
    translationType: TranslationType;
    doCreateTranslationFile: boolean;
}
export declare type TranslationType = 'XTIT' | 'XTOL' | 'XMSG';
export declare abstract class I18nIndex {
    readonly uri: string;
    protected map: TranslationMap;
    content: string;
    constructor(uri: string);
    abstract index(cdsEnv: ExtractedCdsEnv, content: string): void;
    get entries(): IterableIterator<Translation>;
    getEntry(tId: string): Translation;
    abstract createEntry(cdsEnv: ExtractedCdsEnv, tID: string, translationType: TranslationType): LSP.TextEdit[];
}
export declare const ADD_TEXT_HERE = "<add text here>";
