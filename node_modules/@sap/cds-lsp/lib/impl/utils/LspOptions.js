"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientCapability;
(function (ClientCapability) {
    ClientCapability["CHANGE_CONFIG"] = "capabilities.workspace.didChangeConfiguration";
    ClientCapability["SUPPORT_SNIPPETS"] = "capabilities.textDocument.completion.completionItem.snippetSupport";
    ClientCapability["SUPPORTED_DOC_FORMATS"] = "capabilities.textDocument.completion.completionItem.documentationFormat";
    ClientCapability["WORKSPACEEDIT_DOCUMENTCHANGES"] = "capabilities.workspace.workspaceEdit.documentChanges";
})(ClientCapability = exports.ClientCapability || (exports.ClientCapability = {}));
var WorkspaceValidationMode;
(function (WorkspaceValidationMode) {
    WorkspaceValidationMode["OpenEditorsOnly"] = "OpenEditorsOnly";
    WorkspaceValidationMode["OpenEditorsAndDirectSources"] = "OpenEditorsAndDirectSources";
    WorkspaceValidationMode["OpenEditorsDirectSourcesAndDirectDependencies"] = "OpenEditorsDirectSourcesAndDirectDependencies";
})(WorkspaceValidationMode = exports.WorkspaceValidationMode || (exports.WorkspaceValidationMode = {}));
var UserSetting;
(function (UserSetting) {
    UserSetting["DIAGNOSTICS_LEVEL"] = "cds.diagnosticsSeverity";
    UserSetting["WARN_MISSING_TRANSLATIONS"] = "cds.compiler.markMissingI18nDefault";
    UserSetting["SHOW_COMPILER_ERRORS"] = "cds.compiler.showInternalErrors";
    UserSetting["TRACE_COMPONENTS"] = "cds.trace.components";
    UserSetting["TRACE_LOGFILES_COUNT"] = "cds.trace.logfiles.count";
    UserSetting["TRACE_LOGFILES_MAXSIZE"] = "cds.trace.logfiles.maxSize";
    UserSetting["WORKSPACE_VALIDATION_MODE"] = "cds.workspaceValidationMode";
    UserSetting["WORKSPACESYMBOLS_LAZY"] = "cds.workspaceSymbols.lazy";
    UserSetting["DOCS_IN_COMPLETION"] = "cds.completion.showDocumentation";
    UserSetting["DOCFILES_FOR_COMPLETION"] = "cds.completion.docFiles";
})(UserSetting = exports.UserSetting || (exports.UserSetting = {}));
class LspOptions {
    set clientCapabilities(params) {
        this._clientCapabilities = params;
    }
    set userSettings(params) {
        this._userSettings = params;
    }
    getClientCapability(name, defaultValue) {
        return this.getSetting(this._clientCapabilities, name, defaultValue);
    }
    getUserSetting(name, defaultValue) {
        if (this._userSettings) {
            return this.getSetting(this._userSettings.settings, name, defaultValue);
        }
        else {
            return defaultValue;
        }
    }
    getSetting(node, name, defaultValue) {
        try {
            const segments = name.split('.');
            let x = node;
            for (const segment of segments) {
                if (!Object.prototype.hasOwnProperty.call(x, segment)) {
                    return defaultValue;
                }
                x = x[segment];
            }
            return x;
        }
        catch (e) {
            return defaultValue;
        }
    }
}
exports.LspOptions = LspOptions;
//# sourceMappingURL=LspOptions.js.map