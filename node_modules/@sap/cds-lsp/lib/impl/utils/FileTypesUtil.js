"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const Adapters_1 = require("./Adapters");
const StringUtils_1 = require("./StringUtils");
const trace_1 = require("./trace");
exports.PACKAGE_JSON = 'package.json';
var LspFileType;
(function (LspFileType) {
    LspFileType["Unrelated"] = "Unrelated";
    LspFileType["PackageJson"] = "PackageJson";
    LspFileType["IgnoreFile"] = "IgnoreFile";
    LspFileType["TranslationDefinitions"] = "TranslationDefinitions";
    LspFileType["CdsSource"] = "CdsSource";
    LspFileType["CsnFile"] = "CsnFile";
    LspFileType["CdsEnv"] = ".cdsrc.json";
})(LspFileType = exports.LspFileType || (exports.LspFileType = {}));
function isTranslationFile(cdsEnv, uriOrFilepath = '') {
    const extension = path.extname(uriOrFilepath);
    if (!['.properties', '.json', '.csv'].includes(extension))
        return false;
    const basename = path.basename(uriOrFilepath);
    if (!basename.startsWith(cdsEnv.i18n.file))
        return false;
    uriOrFilepath = uriOrFilepath.replace(new RegExp('\\' + path.sep, 'g'), '/');
    for (const i18nFolder of cdsEnv.i18n.folders) {
        for (const lang of [cdsEnv.i18n.fallback_bundle, cdsEnv.i18n.default_language]) {
            let suffix = lang.length
                ? '_' + lang.replace('-', '_')
                : lang;
            if (uriOrFilepath.endsWith(`/${i18nFolder}/${cdsEnv.i18n.file}${suffix}${extension}`))
                return true;
            if (lang.length) {
                suffix = '_' + lang.match(/[a-zA-Z]+/);
                if (uriOrFilepath.endsWith(`/${i18nFolder}/${cdsEnv.i18n.file}${suffix}${extension}`))
                    return true;
            }
        }
    }
    return false;
}
exports.isTranslationFile = isTranslationFile;
function isPackageJsonFile(uriOrFilepath = '') {
    return path.basename(uriOrFilepath) === exports.PACKAGE_JSON;
}
exports.isPackageJsonFile = isPackageJsonFile;
function typeofFile(uriOrFilepath, cdsEnv, getContent) {
    if (uriOrFilepath && !uriOrFilepath.endsWith(path.sep)) {
        const basename = path.basename(uriOrFilepath);
        const extension = path.extname(uriOrFilepath);
        switch (extension) {
            case '.cds': return LspFileType.CdsSource;
            case '.csn': return LspFileType.CsnFile;
            case '.json':
                if (basename === exports.PACKAGE_JSON)
                    return LspFileType.PackageJson;
                if (isCdsEnvFile(uriOrFilepath))
                    return LspFileType.CdsEnv;
                if (isCsnFile(uriOrFilepath, getContent))
                    return LspFileType.CsnFile;
                break;
            case '':
                if (isIgnoreFile(basename))
                    return LspFileType.IgnoreFile;
                break;
        }
        if (isTranslationFile(cdsEnv, uriOrFilepath))
            return LspFileType.TranslationDefinitions;
    }
    return LspFileType.Unrelated;
}
exports.typeofFile = typeofFile;
exports.uriToIsCsn = new Map();
function isCsnFile(uriOrFilepath, getContent) {
    var _a, _b, _c;
    if (uriOrFilepath.endsWith('.csn') || uriOrFilepath.endsWith('csn.json')) {
        return true;
    }
    if (uriOrFilepath.endsWith('.json') && !isPackageJsonFile(uriOrFilepath)) {
        try {
            if (exports.uriToIsCsn.has(uriOrFilepath))
                return exports.uriToIsCsn.get(uriOrFilepath);
            const json = StringUtils_1.parseJson(getContent());
            const isCsn = !!((json === null || json === void 0 ? void 0 : json.$version) && ((_b = (_a = json === null || json === void 0 ? void 0 : json.meta) === null || _a === void 0 ? void 0 : _a.creator) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes('cds'))) || !!((_c = json === null || json === void 0 ? void 0 : json.version) === null || _c === void 0 ? void 0 : _c.csn);
            exports.uriToIsCsn.set(uriOrFilepath, isCsn);
            return isCsn;
        }
        catch (e) {
            trace_1.currentTrace().tracer(trace_1.LspTraceComponent.WORKSPACE).warn(`Invalid JSON file ${uriOrFilepath}: ${e}`);
        }
    }
    return false;
}
exports.isCsnFile = isCsnFile;
function isCdsEnvFile(uriOrFilepath = '') {
    return ['.cdsrc.json', 'default-env.json'].includes(path.basename(uriOrFilepath));
}
exports.isCdsEnvFile = isCdsEnvFile;
function isIgnoreFile(uriOrFilepath = '') {
    return ['.gitignore', '.cdsignore'].includes(path.basename(uriOrFilepath));
}
exports.isIgnoreFile = isIgnoreFile;
function isCdsSourceFile(uriOrFilepath = '') {
    return path.extname(uriOrFilepath) === '.cds';
}
exports.isCdsSourceFile = isCdsSourceFile;
function isCdsFile(uriOrFilepath = '', content) {
    switch (path.extname(uriOrFilepath)) {
        case '.cds': return true;
        case '.csn': return true;
        case '.json': return isCsnFile(uriOrFilepath, () => content || fs.readFileSync(Adapters_1.toLocalPath(Adapters_1.toSimpleUri(uriOrFilepath))).toString());
    }
    return !!uriOrFilepath && uriOrFilepath.startsWith('untitled:');
}
exports.isCdsFile = isCdsFile;
//# sourceMappingURL=FileTypesUtil.js.map