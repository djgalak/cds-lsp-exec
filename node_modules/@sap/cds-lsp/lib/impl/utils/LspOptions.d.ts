import * as LSP from 'vscode-languageserver-protocol';
export interface CdsDidChangeConfigurationParams extends LSP.DidChangeConfigurationParams {
    settings: {
        cds?: {
            autoInstallDependencies?: boolean;
            compiler?: {
                origin?: 'BuiltIn' | 'Project_Then_BuiltIn' | 'Project_Then_Global_Then_BuiltIn';
                markMissingI18nDefault?: boolean;
                showInternalErrors?: boolean;
            };
            completion?: {
                showDocumentation?: boolean;
                docFiles?: string[];
            };
            diagnosticsSeverity?: 'Error' | 'Warning' | 'Info' | 'Debug';
            experimental?: {
                beautify: {
                    enabled: boolean;
                };
            };
            trace?: {
                server?: 'off' | 'messages' | 'verbose';
                components?: Array<{
                    name: '*' | 'adapter' | 'completion' | 'format' | 'model' | 'requests' | 'util' | 'workspace' | 'build' | 'update' | 'lsp';
                    level: 'off' | 'error' | 'warning' | 'info' | 'verbose';
                }>;
                logfiles?: {
                    count: number;
                    maxSize: number;
                };
            };
            workspaceSymbols?: {
                lazy: boolean;
            };
            workspaceValidationMode?: 'OpenEditorsOnly' | 'OpenEditorsAndDirectSources' | 'OpenEditorsDirectSourcesAndDirectDependencies';
        };
    };
}
export declare enum ClientCapability {
    CHANGE_CONFIG = "capabilities.workspace.didChangeConfiguration",
    SUPPORT_SNIPPETS = "capabilities.textDocument.completion.completionItem.snippetSupport",
    SUPPORTED_DOC_FORMATS = "capabilities.textDocument.completion.completionItem.documentationFormat",
    WORKSPACEEDIT_DOCUMENTCHANGES = "capabilities.workspace.workspaceEdit.documentChanges"
}
export declare enum WorkspaceValidationMode {
    OpenEditorsOnly = "OpenEditorsOnly",
    OpenEditorsAndDirectSources = "OpenEditorsAndDirectSources",
    OpenEditorsDirectSourcesAndDirectDependencies = "OpenEditorsDirectSourcesAndDirectDependencies"
}
export declare enum UserSetting {
    DIAGNOSTICS_LEVEL = "cds.diagnosticsSeverity",
    WARN_MISSING_TRANSLATIONS = "cds.compiler.markMissingI18nDefault",
    SHOW_COMPILER_ERRORS = "cds.compiler.showInternalErrors",
    TRACE_COMPONENTS = "cds.trace.components",
    TRACE_LOGFILES_COUNT = "cds.trace.logfiles.count",
    TRACE_LOGFILES_MAXSIZE = "cds.trace.logfiles.maxSize",
    WORKSPACE_VALIDATION_MODE = "cds.workspaceValidationMode",
    WORKSPACESYMBOLS_LAZY = "cds.workspaceSymbols.lazy",
    DOCS_IN_COMPLETION = "cds.completion.showDocumentation",
    DOCFILES_FOR_COMPLETION = "cds.completion.docFiles"
}
export interface ILspOptions {
    getClientCapability(name: ClientCapability | string, defaultValue?: any): any;
    getUserSetting<T>(name: UserSetting | string, defaultValue?: T): T;
}
export declare class LspOptions implements ILspOptions {
    private _clientCapabilities;
    private _userSettings;
    set clientCapabilities(params: LSP.InitializeParams);
    set userSettings(params: CdsDidChangeConfigurationParams);
    getClientCapability(name: ClientCapability | string, defaultValue?: any): any;
    getUserSetting<T>(name: UserSetting | string, defaultValue?: T): T;
    protected getSetting(node: any, name: string, defaultValue?: any): any;
}
