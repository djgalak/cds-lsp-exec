import { ITracer } from './trace';
declare type TaskState = 'queued' | 'started' | 'completed';
export declare class Task<T> {
    private tracer;
    resourceId: string;
    asyncTask: () => Promise<T>;
    private previousResult?;
    state: TaskState;
    readonly asyncResult: Promise<T>;
    versions: number[];
    constructor(tracer: ITracer, resourceId: string, version: number, asyncTask: () => Promise<T>, previousResult?: Promise<T>);
    rebase(newVersion: number, asyncTask: () => Promise<T>): void;
    isResponsibleFor(version: number): boolean;
    toString(): string;
}
export declare class TaskManager<T> {
    protected _idToTasks: Map<string, Task<T>[]>;
    protected tracer: ITracer;
    enqueue(resourceId: string, version: number, asyncTask: () => Promise<T>): Promise<T>;
}
export {};
