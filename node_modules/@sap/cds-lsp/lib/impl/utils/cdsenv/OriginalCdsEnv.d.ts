export interface I18n {
    folders: string[];
    file: string;
    default_language: string;
    fallback_bundle: string;
}
export interface EnvFolders {
    app?: string;
    srv?: string;
    db?: string;
}
export interface OriginalCdsEnv {
    folders: EnvFolders;
    i18n: I18n;
    cdsc: {
        [key: string]: string;
    };
    build: {
        tasks: BuildTask[];
    };
}
export interface Cds {
    env: OriginalCdsEnv;
    resolve(modelFile: string): string[];
    build: {
        BuildTaskFactory: typeof BuildTaskFactory;
    };
}
export interface CdsLogger {
    log(o: any): void;
    error(o: any): void;
}
export interface CdsBuildOptions {
    root: string;
}
export declare class BuildTaskFactory {
    constructor(logger: CdsLogger, cds: Cds);
    getTasks(buildOptions: CdsBuildOptions): Promise<BuildTask[]>;
}
export interface BuildTask {
    options?: {
        model?: string[];
    };
}
