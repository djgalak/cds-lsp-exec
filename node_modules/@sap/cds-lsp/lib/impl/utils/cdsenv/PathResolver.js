"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const trace_1 = require("../trace");
class PathResolver {
    constructor() {
        this.resolveCache = {};
    }
    _resolveId(id, rootFolder) {
        let resolved;
        const relativeResolve = () => {
            const pathResolved = path.resolve(rootFolder, id);
            return fs.existsSync(pathResolved) ? pathResolved : undefined;
        };
        try {
            resolved = id.startsWith('.')
                ? relativeResolve()
                : require.resolve(id, { paths: [rootFolder] });
        }
        catch (e) {
            trace_1.currentTrace().tracer(trace_1.LspTraceComponent.WORKSPACE).verbose(`Could not resolve id '${id}' from ${rootFolder}`);
        }
        return resolved;
    }
    resolveId(id, rootFolder) {
        const cacheId = `${id}:${rootFolder}`;
        const resolveAndCache = () => this.resolveCache[cacheId] = this._resolveId(id, rootFolder);
        return this.resolveCache[cacheId] || resolveAndCache();
    }
    resolveModule(idChain, startFolders) {
        for (const startFolder of startFolders) {
            const resolved = idChain.reduce((viaPath, viaId) => viaPath
                ? this.resolveId(viaId, viaPath)
                : undefined, startFolder);
            if (resolved)
                return resolved;
        }
        return undefined;
    }
    reset() {
        this.resolveCache = {};
    }
    getPlatform() {
        return os.platform();
    }
    getEnv(key) {
        const envKey = Object.keys(process.env).find(k => k.toLowerCase() === key.toLowerCase());
        return process.env[envKey];
    }
    getGlobalNodeModulesFolders() {
        const nodePath = this.getEnv('NODE_PATH');
        if (nodePath) {
            return nodePath.split(path.delimiter);
        }
        return this.getPlatform() === 'win32'
            ? [path.join(this.getEnv('AppData'), 'npm', 'node_modules')]
            : [
                '/usr/local/lib/node_modules',
                '/usr/lib/node_modules',
                '/home/user/.node_modules_global/lib/node_modules',
                '/local/npm/lib'
            ];
    }
    getLspFolder() {
        return path.resolve(path.join(__dirname, '../../../..'));
    }
}
__decorate([
    trace_1.Footprint(trace_1.LspTraceComponent.UTIL)
], PathResolver.prototype, "_resolveId", null);
__decorate([
    trace_1.Footprint(trace_1.LspTraceComponent.UTIL, { traceLevel: trace_1.LspTraceLevel.VERBOSE })
], PathResolver.prototype, "getEnv", null);
__decorate([
    trace_1.Footprint(trace_1.LspTraceComponent.UTIL, { traceLevel: trace_1.LspTraceLevel.VERBOSE })
], PathResolver.prototype, "getGlobalNodeModulesFolders", null);
exports.PathResolver = PathResolver;
//# sourceMappingURL=PathResolver.js.map