declare class RelevantRuleNames {
    start: BlockRule;
    annotateElement: BlockRule;
    annotationAssignment_atn: BlockRule;
    annotationAssignment_fix: BlockRule;
    annotationAssignment_ll1: BlockRule;
    annotationAssignment_1: BlockRule;
    annotationAssignment_paren: BlockRule;
    annotationDef: BlockRule;
    arrayValue: BlockRule;
    artifactDef: BlockRule;
    condition: BlockRule;
    conditionTerm: BlockRule;
    contextDef: BlockRule;
    elementDef: BlockRule;
    elementDefInner: BlockRule;
    entityDef: BlockRule;
    expression: BlockRule;
    extendContext: BlockRule;
    innerUsing: BlockRule;
    mixinElementDef: BlockRule;
    namedValue: BlockRule;
    namedValueInArray: BlockRule;
    namespaceDeclaration: BlockRule;
    orderBySpec: BlockRule;
    projectionExclusion: BlockRule;
    queryExpression: BlockRule;
    queryTerm: BlockRule;
    queryPrimary: BlockRule;
    selectItemDef: BlockRule;
    tableExpression: BlockRule;
    typeAssociationBase: BlockRule;
    typeAssociationCont: BlockRule;
    typeAssociationElementCont: BlockRule;
    typeDef: BlockRule;
    typeRefOptArgs: BlockRule;
    typeSpecSemi: BlockRule;
    usingDeclaration: BlockRule;
    value: BlockRule;
    viewDef: BlockRule;
}
export declare const BlockRules: RelevantRuleNames;
export declare type BlockRule = keyof RelevantRuleNames;
export declare function isBlockRule(s: string): s is BlockRule;
export {};
