"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const Logger_1 = require("./util/Logger");
exports.CDS_PRETTIER_JSON = '.cdsprettier.json';
function fileOptions(metaModel, sourceFilePath, topParentFolder = '', logger = new Logger_1.Logger()) {
    topParentFolder = path.normalize(topParentFolder);
    if (topParentFolder.endsWith(path.sep)) {
        topParentFolder = topParentFolder.slice(0, -1);
    }
    const parentPath = path.dirname;
    const convertToFormattingOptions = (json, sourceTag) => {
        const opts = metaModel.emptySet(sourceTag);
        Object.keys(json).forEach(key => opts.setOption(key, json[key]));
        return opts;
    };
    const readConfig = (filePath) => {
        try {
            logger.logDebug(() => `Checking ${filePath} for options`);
            if (fs.existsSync(filePath)) {
                logger.logDebug(() => `Reading ${filePath}`);
                const content = fs.readFileSync(filePath).toString();
                const json = JSON.parse(content);
                return convertToFormattingOptions(json, filePath);
            }
        }
        catch (e) {
            logger.logDebug(() => `Could not load options from ${filePath}: ${e}`);
        }
        return undefined;
    };
    const pathsToCheck = [];
    let folder = parentPath(sourceFilePath);
    while (folder.startsWith(topParentFolder)) {
        pathsToCheck.push(folder);
        folder = parentPath(folder);
    }
    pathsToCheck.push(os.homedir());
    for (const folderPath of pathsToCheck) {
        const filePath = path.join(folderPath, exports.CDS_PRETTIER_JSON);
        const formattingOptions = readConfig(filePath);
        if (formattingOptions) {
            return { formattingOptions, filePath };
        }
    }
    return undefined;
}
exports.fileOptions = fileOptions;
function mapLspOptions(metaModel, lspOptions, logger) {
    const formattingOptions = metaModel.emptySet('LSP');
    for (const key of Object.keys(lspOptions)) {
        const lspOption = key;
        switch (lspOption) {
            case 'insertSpaces':
                if (!lspOptions[lspOption]) {
                    logger.logInfo(() => `/ ignoring option ${lspOption}=${lspOptions[lspOption]}. Due to vertical alignments tab indenting would break formatting`);
                }
                break;
            default:
                formattingOptions.setOption(key, lspOptions[lspOption]);
                break;
        }
    }
    return formattingOptions;
}
exports.mapLspOptions = mapLspOptions;
//# sourceMappingURL=EditorOptions.js.map