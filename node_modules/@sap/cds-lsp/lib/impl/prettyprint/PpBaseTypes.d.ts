import { AntlrToken } from './parse/AntlrTypes';
import { PpRuleNode } from './PpRuleNode';
import { PpRuleToken } from './PpRuleToken';
import { Logger } from './util/Logger';
export declare class PpParserContext {
    logger: Logger;
    readonly allTokens: PpRuleToken[];
    rawTokens: AntlrToken[];
    getPreviousToken(token: AntlrToken, predicate: (token: PpRuleToken) => boolean): PpRuleToken;
    getNextToken(token: AntlrToken, predicate: (token: PpRuleToken) => boolean): PpRuleToken;
}
export declare type Category = 'Identifier' | 'Keyword' | 'Operator' | 'number' | 'Comment' | 'LineComment' | 'DocComment' | '<EOF>';
export declare function getCategory(symbol: AntlrToken): Category;
export declare function getTokens(allTokens: PpRuleToken[], child: PpChild): PpRuleToken[];
export declare type PpChild = PpRuleNode | PpRuleToken;
export declare function getRuleName(ruleContext: any): any;
export declare function indent(n: number): string;
export declare function reduceChildren(children: PpChild[]): PpChild[];
