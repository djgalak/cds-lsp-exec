"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BlockRules_1 = require("../BlockRules");
const PpRuleNode_1 = require("../PpRuleNode");
const TreeUtil_1 = require("../util/TreeUtil");
const FormattingBasics_1 = require("./FormattingBasics");
const GenericElementComponentsFormatter_1 = require("./GenericElementComponentsFormatter");
class ElementDefInnerFormatter extends GenericElementComponentsFormatter_1.GenericElementComponentsFormatter {
    constructor() {
        super(...arguments);
        this.entityDefAncestor = TreeUtil_1.getNearestAncestor(this, BlockRules_1.BlockRules.entityDef);
        this.alignName = true;
        this.alignedWithName = false;
        this.annotationAlignedWithName = false;
    }
    beforeNodeNoCache(node) {
        if (!this.entityDefAncestor) {
            return [];
        }
        if (FormattingBasics_1.lowerLexem(node.getFirstToken(TreeUtil_1.nonCommentNonAnnotation)) === 'key') {
            const instructions = this.annotationAlignedWithName
                ? ['=']
                : [];
            instructions.push(this.entityDefAncestor.getBlockAlignment('elementKey', this.firstTokenIndex));
            if (!this.context.formatOptions.getOption('alignAfterKey', this.firstTokenIndex)) {
                this.alignName = false;
            }
            return instructions;
        }
        this.alignedWithName = true;
        return this.annotationAlignedWithName
            ? []
            : [this.entityDefAncestor.getBlockAlignment('elementName', this.firstTokenIndex)];
    }
    beforeChildNoCache(node, child, children) {
        var _a, _b;
        const genericInstructions = super.beforeChildNoCache(node, child, children);
        if (genericInstructions.length) {
            return genericInstructions;
        }
        if (['virtual', 'key', 'masked', 'element'].includes(FormattingBasics_1.lowerLexem(child))) {
            return [];
        }
        if (this.alignName && !this.alignedWithName) {
            this.alignedWithName = true;
            return [(_a = this.entityDefAncestor) === null || _a === void 0 ? void 0 : _a.getBlockAlignment('elementName', child.getStartTokenIndex())];
        }
        if (FormattingBasics_1.lowerLexem(child) === 'as') {
            return [(_b = this.entityDefAncestor) === null || _b === void 0 ? void 0 : _b.getAlignment('elementAS', child.getStartTokenIndex())];
        }
        return [];
    }
    afterChildNoCache(node, child, children) {
        if (child instanceof PpRuleNode_1.PpRuleNode && [BlockRules_1.BlockRules.typeAssociationCont, BlockRules_1.BlockRules.typeAssociationElementCont].includes(FormattingBasics_1.ruleName(child))) {
            const firstToken = child.getFirstToken(TreeUtil_1.nonCommentNonAnnotation);
            if (firstToken && FormattingBasics_1.lowerLexem(firstToken) === 'on') {
                return [
                    '=',
                    '°'
                ];
            }
            return ['°'];
        }
        return [];
    }
    getAnnotationAlignment(token) {
        var _a;
        this.annotationAlignedWithName = true;
        return (_a = this.entityDefAncestor) === null || _a === void 0 ? void 0 : _a.getBlockAlignment('elementName', token.tokenIndex);
    }
}
exports.ElementDefInnerFormatter = ElementDefInnerFormatter;
//# sourceMappingURL=ElementDefInnerFormatter.js.map