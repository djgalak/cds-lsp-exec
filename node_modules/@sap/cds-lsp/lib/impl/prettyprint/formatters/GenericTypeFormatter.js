"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const BlockRules_1 = require("../BlockRules");
const TreeUtil_1 = require("../util/TreeUtil");
const FormattingBasics_1 = require("./FormattingBasics");
class GenericTypeFormatter extends FormattingBasics_1.NodeFormatter {
    beforeNodeNoCache(node) {
        if (!this.context.formatOptions.getOption('alignTypes', this.firstTokenIndex)) {
            return [];
        }
        const statementAncestor = TreeUtil_1.getNearestAncestor(this, BlockRules_1.BlockRules.artifactDef, BlockRules_1.BlockRules.typeSpecSemi);
        assert(statementAncestor, 'missing statement ancestor');
        if (this.context.formatOptions.getOption('alignTypesWithinBlock', node.getStartTokenIndex())) {
            const elementAncestor = TreeUtil_1.getNearestAncestor(this, BlockRules_1.BlockRules.mixinElementDef, BlockRules_1.BlockRules.elementDefInner, BlockRules_1.BlockRules.selectItemDef);
            if (elementAncestor) {
                return [statementAncestor.getAlignment(elementAncestor.ruleName + '.type', this.firstTokenIndex)];
            }
        }
        return [statementAncestor.getAlignment('type', this.firstTokenIndex)];
    }
}
exports.GenericTypeFormatter = GenericTypeFormatter;
//# sourceMappingURL=GenericTypeFormatter.js.map