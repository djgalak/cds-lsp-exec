import { PpChild } from '../PpBaseTypes';
import { PpRuleNode } from '../PpRuleNode';
import { FormattingInstructionOrAlignment, NodeFormatter } from './FormattingBasics';
export declare class ExpressionFormatter extends NodeFormatter {
    startsWithBracket: boolean;
    startsWithCase: boolean;
    insideCase: boolean;
    private conditionAncestor;
    private partOfCondition;
    private whenThenIndented;
    private _queryAncestor;
    private _skipNodeAlignment;
    private get queryAncestor();
    private get skipNodeAlignment();
    beforeNodeNoCache(node: PpRuleNode): FormattingInstructionOrAlignment[];
    afterNodeNoCache(node: PpRuleNode): FormattingInstructionOrAlignment[];
    beforeChildNoCache(node: PpRuleNode, child: PpChild, children: PpChild[]): FormattingInstructionOrAlignment[];
    afterChildNoCache(node: PpRuleNode, child: PpChild, children: PpChild[]): FormattingInstructionOrAlignment[];
}
