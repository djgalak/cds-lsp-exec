"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const BlockRules_1 = require("../BlockRules");
const PpRuleToken_1 = require("../PpRuleToken");
const TreeUtil_1 = require("../util/TreeUtil");
const FormattingBasics_1 = require("./FormattingBasics");
const GenericElementComponentsFormatter_1 = require("./GenericElementComponentsFormatter");
class SelectItemDefFormatter extends GenericElementComponentsFormatter_1.GenericElementComponentsFormatter {
    constructor() {
        super(...arguments);
        this.expressionFound = false;
        this.queryAncestor = TreeUtil_1.getNearestAncestor(this, BlockRules_1.BlockRules.queryPrimary);
    }
    beforeNodeNoCache(node) {
        assert(this.queryAncestor, 'missing query ancestor');
        if (this.queryAncestor.lateFromInline) {
            return [];
        }
        if (!this.queryAncestor.lateFrom || this.queryAncestor.state.lateFromMultipleSelectItems) {
            return ['\n'];
        }
        this.queryAncestor.state.lateFromMultipleSelectItems = true;
        return ['\n+1'];
    }
    afterNodeNoCache(node) {
        if (this.queryAncestor.lateFromInline) {
            return [];
        }
        return ['\n'];
    }
    beforeChildNoCache(node, child, children) {
        const genericInstructions = super.beforeChildNoCache(node, child, children);
        if (genericInstructions.length) {
            return genericInstructions;
        }
        switch (FormattingBasics_1.lowerLexem(child)) {
            case 'key':
                return [this.queryAncestor.getAlignment('selectItemKey', child.getStartTokenIndex())];
            case 'as':
                this.applyBeforeNextChild = [this.queryAncestor.getAlignment('selectItemEffectiveName', child.getStartTokenIndex())];
                return [this.queryAncestor.getAlignment('selectItemAS', child.getStartTokenIndex())];
        }
        if (this.expressionFound) {
            return [];
        }
        this.expressionFound = true;
        if (!this.queryAncestor.lateFromInline) {
            this.applyAfterCurrentChild.push('=');
            return [this.queryAncestor.getBlockAlignment('selectItem', child.getStartTokenIndex())];
        }
        return [];
    }
    getAnnotationAlignment(token) {
        return token instanceof PpRuleToken_1.PpRuleToken && token.getLowerLexem() === 'key'
            ? this.queryAncestor.getBlockAlignment('selectItem', token.tokenIndex)
            : undefined;
    }
}
exports.SelectItemDefFormatter = SelectItemDefFormatter;
//# sourceMappingURL=SelectItemDefFormatter.js.map