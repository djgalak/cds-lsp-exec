"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BlockRules_1 = require("../BlockRules");
const ConditionFormatter_1 = require("./ConditionFormatter");
const ConditionTermFormatter_1 = require("./ConditionTermFormatter");
const ElementDefInnerFormatter_1 = require("./ElementDefInnerFormatter");
const EntityDefFormatter_1 = require("./EntityDefFormatter");
const ExpressionFormatter_1 = require("./ExpressionFormatter");
const FormattingBasics_1 = require("./FormattingBasics");
const GenericAnnotationAssignmentFormatter_1 = require("./GenericAnnotationAssignmentFormatter");
const InnerUsingFormatter_1 = require("./InnerUsingFormatter");
const MixinElementDefFormatter_1 = require("./MixinElementDefFormatter");
const NamedValueFormatter_1 = require("./NamedValueFormatter");
const NamedValueInArrayFormatter_1 = require("./NamedValueInArrayFormatter");
const OrderBySpecFormatter_1 = require("./OrderBySpecFormatter");
const ProjectionExclusionFormatter_1 = require("./ProjectionExclusionFormatter");
const QueryFormatter_1 = require("./QueryFormatter");
const SelectItemDefFormatter_1 = require("./SelectItemDefFormatter");
const TableExpressionFormatter_1 = require("./TableExpressionFormatter");
const TypeAssociationBaseFormatter_1 = require("./TypeAssociationBaseFormatter");
const TypeRefOptArgsFormatter_1 = require("./TypeRefOptArgsFormatter");
const TypeSpecSemiFormatter_1 = require("./TypeSpecSemiFormatter");
class NopFormatter extends FormattingBasics_1.NodeFormatter {
}
class NodeFormatterFactory {
    static register(rule, formatterCtor) {
        this._ruleNameToFormatterCtor[rule] = formatterCtor;
    }
    static createFormatter(node, context) {
        const rule = node.ruleName;
        const formatterCtor = this._ruleNameToFormatterCtor[rule];
        if (formatterCtor) {
            const formatter = formatterCtor(node, context);
            if (formatter.enablementSwitch && !context.formatOptions.getOption(formatter.enablementSwitch, node.getStartTokenIndex())) {
                return new NopFormatter(node, context);
            }
            return formatter;
        }
        return new NopFormatter(node, context);
    }
}
exports.NodeFormatterFactory = NodeFormatterFactory;
NodeFormatterFactory._ruleNameToFormatterCtor = {};
NodeFormatterFactory.register(BlockRules_1.BlockRules.viewDef, (node, context) => new NopFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.queryExpression, (node, context) => new QueryFormatter_1.QueryExpressionFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.queryTerm, (node, context) => new QueryFormatter_1.QueryTermFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.queryPrimary, (node, context) => new QueryFormatter_1.QueryPrimaryFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.tableExpression, (node, context) => new TableExpressionFormatter_1.TableExpressionFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.condition, (node, context) => new ConditionFormatter_1.ConditionFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.conditionTerm, (node, context) => new ConditionTermFormatter_1.ConditionTermFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.mixinElementDef, (node, context) => new MixinElementDefFormatter_1.MixinElementDefFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.selectItemDef, (node, context) => new SelectItemDefFormatter_1.SelectItemDefFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.projectionExclusion, (node, context) => new ProjectionExclusionFormatter_1.ProjectionExclusionFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.expression, (node, context) => new ExpressionFormatter_1.ExpressionFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.orderBySpec, (node, context) => new OrderBySpecFormatter_1.OrderBySpecFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.elementDefInner, (node, context) => new ElementDefInnerFormatter_1.ElementDefInnerFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.typeAssociationBase, (node, context) => new TypeAssociationBaseFormatter_1.TypeAssociationBaseFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.entityDef, (node, context) => new EntityDefFormatter_1.EntityDefFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.typeRefOptArgs, (node, context) => new TypeRefOptArgsFormatter_1.TypeRefOptArgsFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.typeSpecSemi, (node, context) => new TypeSpecSemiFormatter_1.TypeSpecSemiFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.innerUsing, (node, context) => new InnerUsingFormatter_1.InnerUsingFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.annotationAssignment_1, (node, context) => new GenericAnnotationAssignmentFormatter_1.GenericAnnotationAssignmentFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.annotationAssignment_fix, (node, context) => new GenericAnnotationAssignmentFormatter_1.GenericAnnotationAssignmentFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.annotationAssignment_ll1, (node, context) => new GenericAnnotationAssignmentFormatter_1.GenericAnnotationAssignmentFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.annotationAssignment_atn, (node, context) => new GenericAnnotationAssignmentFormatter_1.GenericAnnotationAssignmentFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.namedValue, (node, context) => new NamedValueFormatter_1.NamedValueFormatter(node, context));
NodeFormatterFactory.register(BlockRules_1.BlockRules.namedValueInArray, (node, context) => new NamedValueInArrayFormatter_1.NamedValueInArrayFormatter(node, context));
//# sourceMappingURL=NodeFormatters.js.map