"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BlockRules_1 = require("../BlockRules");
const TreeUtil_1 = require("../util/TreeUtil");
const FormattingBasics_1 = require("./FormattingBasics");
class InnerUsingFormatter extends FormattingBasics_1.NodeFormatter {
    constructor(node, context) {
        super(node, context);
        this.enablementSwitch = 'alignAsInUsing';
        this.onlyTokenChildren = true;
    }
    get ancestor() {
        if (this._ancestor === undefined) {
            this._ancestor = TreeUtil_1.getNearestAncestor(this, BlockRules_1.BlockRules.usingDeclaration);
        }
        return this._ancestor;
    }
    beforeChildNoCache(node, child, children) {
        var _a, _b;
        if (FormattingBasics_1.lowerLexem(child) === 'as') {
            return [(_a = this.ancestor) === null || _a === void 0 ? void 0 : _a.getAlignment('usingAS', child.getStartTokenIndex())];
        }
        const nextSibling = TreeUtil_1.getNextSibling(child, TreeUtil_1.nonCommentNonAnnotation);
        if (!nextSibling || [',', '.'].includes(FormattingBasics_1.lowerLexem(nextSibling))) {
            return [
                (_b = this.ancestor) === null || _b === void 0 ? void 0 : _b.getAlignment('usingEffectiveName', child.getStartTokenIndex()),
                'Â°'
            ];
        }
        return [];
    }
}
exports.InnerUsingFormatter = InnerUsingFormatter;
//# sourceMappingURL=InnerUsingFormatter.js.map