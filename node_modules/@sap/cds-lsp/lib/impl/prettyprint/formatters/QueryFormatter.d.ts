import { GlobalContext } from '../GlobalContext';
import { PpChild } from '../PpBaseTypes';
import { PpRuleNode } from '../PpRuleNode';
import { FormattingInstructionOrAlignment, NodeFormatter, QueryState } from './FormattingBasics';
export declare class QueryFormatter extends NodeFormatter {
    private readonly topLevelQuery?;
    startsWithBracket: boolean;
    state: QueryState;
    private firstSelectToken;
    private _firstIndentWidth;
    private _hasUnindent;
    private fromInline;
    private lastSelectItem;
    lateFrom: boolean;
    lateFromInline: boolean;
    lateFromNewLine: boolean;
    openingBraceForSelectItemsInFirstLine: boolean;
    constructor(node: PpRuleNode, context: GlobalContext, topLevelQuery?: QueryExpressionFormatter);
    get hasUnindent(): boolean;
    get firstIndentWidth(): number;
    protected resolveLocalAlignmentIdAliases(alignmentId: string): string;
    protected resolveAlignmentId(alignmentId: string, tokenIndex: number, generalize?: boolean): string;
    beforeNodeNoCache(node: PpRuleNode): FormattingInstructionOrAlignment[];
    afterNodeNoCache(node: PpRuleNode): FormattingInstructionOrAlignment[];
    beforeChildNoCache(node: PpRuleNode, child: PpChild, children: PpChild[]): FormattingInstructionOrAlignment[];
    afterChildNoCache(node: PpRuleNode, child: PpChild, children: PpChild[]): FormattingInstructionOrAlignment[];
}
export declare class QueryExpressionFormatter extends QueryFormatter {
}
export declare class QueryTermFormatter extends QueryFormatter {
}
export declare class QueryPrimaryFormatter extends QueryFormatter {
}
