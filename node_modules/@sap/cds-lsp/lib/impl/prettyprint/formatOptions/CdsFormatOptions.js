"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MetaModel_1 = require("./MetaModel");
class CdsFormatOptions extends MetaModel_1.MetaOptionMap {
    constructor() {
        super(...arguments);
        this.alignAfterKey = new MetaModel_1.MetaOption(true, 'Align _element names_ after **key**', 'Align _element identifiers_ after optional **key** keyword');
        this.alignAnnotations = new MetaModel_1.MetaOption(true, 'Align _annotations_', 'Align _annotations_');
        this.alignPreAnnotations = new MetaModel_1.MetaOption(true, 'pre-annotations', 'Align _**@**_ of annotations before items. If multiple annotations exist in a line, they are aligned in a tabular way', undefined, 'alignAnnotations');
        this.alignPostAnnotations = new MetaModel_1.MetaOption(true, 'post-annotations', 'Align _**@**_ of annotations after items', undefined, 'alignAnnotations');
        this.alignColonsInAnnotations = new MetaModel_1.MetaOption(true, 'colons', 'Align _colons_ in annotations', undefined, 'alignAnnotations');
        this.alignValuesInAnnotations = new MetaModel_1.MetaOption(true, 'values', 'Align _values_ in annotations', undefined, 'alignAnnotations');
        this.alignAs = new MetaModel_1.MetaOption(true, 'Align _**as**_', 'Align the _**as**_ keyword');
        this.alignAsInElements = new MetaModel_1.MetaOption(true, 'in elements', 'Align the _**as**_ keyword in entity elements', undefined, 'alignAs');
        this.alignAsInEntities = new MetaModel_1.MetaOption(true, 'in entities', 'Align the _**as**_ keyword in entities. Alignment scope: encompassing context', undefined, 'alignAs');
        this.alignAsInSelectItems = new MetaModel_1.MetaOption(true, 'in **select** items', 'Align the _**as**_ keyword in entity **select** items', undefined, 'alignAs');
        this.alignAsInUsing = new MetaModel_1.MetaOption(true, 'in **using**', 'Align the _**as**_ keyword in **using** statements', undefined, 'alignAs');
        this.alignExpressionsAndConditions = new MetaModel_1.MetaOption(true, 'Align _expressions_ and _conditions_', 'Align parts of _expressions_ and _conditions_, including left- and right-hand side and operator');
        this.alignExprAndCondWithinBlock = new MetaModel_1.MetaOption(true, 'within block', 'Align parts of _expressions_ and _conditions_ within the encompassing block rather than throughout the whole statement', undefined, 'alignExpressionsAndConditions');
        this.alignTypes = new MetaModel_1.MetaOption(true, 'Align _types_ of elements', 'Align _element types_ within entities, type or annotation specifications');
        this.alignColonsBeforeTypes = new MetaModel_1.MetaOption(true, 'including _colons_', 'Align _colons_ before element types', undefined, 'alignTypes');
        this.alignEqualsAfterTypes = new MetaModel_1.MetaOption(true, 'including _assignment operators_', 'Align _assignment operators_ **=** after element types', undefined, 'alignTypes');
        this.alignTypesWithinBlock = new MetaModel_1.MetaOption(true, 'within block', 'Align _element types_ (and _colons_) within the encompassing block rather than throughout the whole statement', undefined, 'alignTypes');
        this.cqlKeywordCapitalization = new MetaModel_1.MetaOption(MetaModel_1.KeywordCasing.lower, 'Capitalization style of _CQL keywords_', 'How _CQL keywords_ are capitalized');
        this.keepAnnotationsInOriginalLine = new MetaModel_1.MetaOption(MetaModel_1.AnnotationLines.keepLine, 'Line wrapping of _annotations_', 'Either keeps the line structure of _annotations_ or wraps each annotation in separate line');
        this.keepEmptyBracketsTogether = new MetaModel_1.MetaOption(true, 'Keep empty _brackets_ together', 'Keep _bracket pairs_ **{} [] ()** together rather than separating them with whitespace');
        this.keepSingleLinedBlocksTogether = new MetaModel_1.MetaOption(true, 'Keep similar single-lined _blocks_ together', 'Avoid single-lined _blocks_ of the same type being separated by empty lines');
        this.keepOriginalEmptyLines = new MetaModel_1.MetaOption(true, 'Keep original _empty lines_', 'Prevent deletion of consecutive empty lines below the limit. If disabled, allow consecutive empty lines to be removed depending on the context.');
        this.maxKeepEmptyLines = new MetaModel_1.MetaOption(2, 'Maximum consecutive _empty lines_', 'Maximum number of consecutive _empty lines_ to keep. Empty lines below this limit may still be removed depending on other settings.');
        this.openingBraceInNewLine = new MetaModel_1.MetaOption(false, 'Line wrapping before opening _brace_', 'Wrap line before opening _brace_');
        this.selectInNewLine = new MetaModel_1.MetaOption(true, 'Line wrapping before _**select**_ of entity or view', 'Start _**select**_ statement of entity or view definition in a new line (indented)');
        this.tabSize = new MetaModel_1.MetaOption(2, 'Tab size', 'Specify the number of spaces per indentation level');
        this.finalNewline = new MetaModel_1.MetaOption(true, 'Final newline', 'Insert newline character at the end of the file');
        this.whitespaceBeforeColon = new MetaModel_1.MetaOption(true, 'Blank before _colon_', 'Use blank to separate item from following _colon_');
        this.whitespaceAfterColon = new MetaModel_1.MetaOption(true, 'Blank after _colon_', 'Use blank to separate _colon_ from following item');
        this.whitespaceAfterComma = new MetaModel_1.MetaOption(true, 'Blank after _comma_', 'Use blank to separate _comma_ from following item');
        this.whitespaceAroundAlignedOps = new MetaModel_1.MetaOption(true, 'Blanks around aligned _binary operators_ and _colons_', 'Use blank before and after aligned _binary operators_ and _colons_');
        this.whitespaceAroundBinaryOps = new MetaModel_1.MetaOption(true, 'Blanks around _binary operators_', 'Use blank before and after _binary operators_');
        this.whitespaceWithinBrackets = new MetaModel_1.MetaOption(false, 'Blanks within _brackets_', 'Use blank after opening and before closing _brackets_ **{} [] ()**');
        this.cancelFormattingOnAlignmentDeadlocks = new MetaModel_1.MetaOption(false, '', '', undefined, undefined, true);
    }
}
exports.CdsFormatOptions = CdsFormatOptions;
//# sourceMappingURL=CdsFormatOptions.js.map