import { CdsFormatOptions, CdsFormatOptionSet } from './formatOptions/CdsFormatOptions';
import { FormatOptionValue, MetaModel } from './formatOptions/MetaModel';
import { ContextRange } from './GlobalContext';
import { PpRuleToken, PpToken } from './PpRuleToken';
import { Logger } from './util/Logger';
export declare function tokenContext(tokens: PpToken[], index: number): string;
export declare function verifyTokens(originalTokens: PpToken[], formattedTokens: PpToken[]): void;
export interface LspFormattingOptions {
    tabSize?: number;
    insertSpaces?: boolean;
    [key: string]: FormatOptionValue;
}
export interface Formatted {
    originalContent: string;
    formattedContent: string;
    originalTokens: PpRuleToken[];
    formattedTokens: PpToken[];
    exclusionRanges: ContextRange[];
}
export declare class CdsPrettyPrint {
    readonly logger: Logger;
    private formatOptionsMetaModel;
    constructor(logger?: Logger, formatOptionsMetaModel?: MetaModel<Readonly<CdsFormatOptions>>);
    protected getCommandLineOptions(): CdsFormatOptionSet;
    getDefaultOptions(): CdsFormatOptionSet;
    protected getEffectiveFormattingOptions(userOptions: LspFormattingOptions, sourcePath: string, workspaceRoot?: string): CdsFormatOptionSet;
    beautify(sOriginalSource: string, lspFormattingOptions: LspFormattingOptions, sourcePath: string, workspaceRoot?: string): Promise<Formatted>;
    private adjustTokenCasing;
}
