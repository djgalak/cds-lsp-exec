import { BlockRule } from './BlockRules';
import { IFormatter } from './formatters/FormattingBasics';
import { GenericRuleRenderer } from './GenericRuleRenderer';
import { GlobalContext } from './GlobalContext';
import { AntlrRuleContext } from './parse/AntlrTypes';
import { PpChild, PpParserContext } from './PpBaseTypes';
import { PpRuleToken } from './PpRuleToken';
import { IColorProvider } from './util/Logger';
export declare class PpRuleNode {
    context: PpParserContext;
    ruleContext: AntlrRuleContext;
    parent: PpRuleNode;
    readonly id: string;
    children: PpChild[];
    private _descendantCounts;
    readonly ruleName: string;
    readonly blockRule: BlockRule;
    _nTokens: number;
    private _ruleRenderer;
    private _formatter;
    streamIndexFrom: number;
    streamIndexTo: number;
    constructor(context: PpParserContext, ruleContext: AntlrRuleContext, parent: PpRuleNode);
    private addToken;
    addChild(child: PpChild): void;
    reduceTree(): void;
    private ensureCorrectParent;
    fixTree(): void;
    toString(): string;
    debugPrint(indentLevel: number, colorProvider: IColorProvider): string;
    getFirstToken(predicate: (token: PpRuleToken) => boolean): PpRuleToken;
    getLastToken(predicate: (token: PpRuleToken) => boolean): PpRuleToken;
    getStartTokenIndex(): number;
    getEndTokenIndex(): number;
    getTokens(): PpRuleToken[];
    getTokenList(): PpRuleToken[];
    countDescendants(ruleName: string): number;
    getRuleRenderer(globalContext: GlobalContext): GenericRuleRenderer;
    getFormatter(globalContext: GlobalContext): IFormatter;
    discardFormatter(): void;
    format(globalContext: GlobalContext, ignoreCache?: boolean): void;
}
