"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function Blanks() {
    let _blanks = ' ';
    return function (n) {
        if (n <= 0) {
            return '';
        }
        while (n > _blanks.length) {
            _blanks += _blanks;
        }
        return _blanks.slice(0, n);
    };
}
exports.blanks = Blanks();
class FormatBase {
    constructor() {
        this.init();
    }
    init() {
        this._setValue({ bIgnore: true });
    }
    toString() {
        return this.constructor.name;
    }
    _setValue(value) {
        this.value = value;
    }
    optionalSimple() {
        this._setValue({ bOptionalSimple: true });
        return this;
    }
    atLeast(n) {
        this._setValue({ nAtLeast: n });
        return this;
    }
    merge(that) {
        if (that.constructor !== this.constructor) {
            return false;
        }
        if (this.value.nAtLeast * that.value.nAtLeast < 0) {
            throw new Error('Cannot merge positive and negative values');
        }
        const sorted = [this, that].sort((a, b) => {
            const aMin = a.value.bIgnore
                ? -1
                : a.value.bOptionalSimple
                    ? 0.5
                    : a.value.nAtLeast === undefined
                        ? 0
                        : Math.abs(a.value.nAtLeast);
            const bMin = b.value.bIgnore
                ? -1
                : b.value.bOptionalSimple
                    ? 0.5
                    : b.value.nAtLeast === undefined
                        ? 0
                        : Math.abs(b.value.nAtLeast);
            return aMin - bMin;
        });
        if (sorted[1] === that) {
            this._setValue(that.value);
        }
        that.init();
        return true;
    }
}
exports.FormatBase = FormatBase;
class Whitespace extends FormatBase {
    _asString(context, globalContext) {
        var _a, _b;
        if (this.value.bOptionalSimple) {
            if (!context) {
                return ' ';
            }
            const surroundingText = context.precedingText + '°' + context.succeedingText;
            const tokenOffset = (_b = (_a = context.precedingToken) === null || _a === void 0 ? void 0 : _a.tokenIndex) !== null && _b !== void 0 ? _b : 0;
            const result = !Whitespace.blankForbidden.test(surroundingText) && (Whitespace.blankRequired.test(surroundingText) ||
                globalContext && Object.entries(Whitespace.blankRequiredIfUserOption).some(([option, regex]) => globalContext.formatOptions.getOption(option, tokenOffset) &&
                    regex.test(surroundingText)))
                ? ' '
                : '';
            return result;
        }
        if (this.value.nAtLeast !== undefined) {
            return exports.blanks(this.value.nAtLeast);
        }
        if (this.value.bIgnore) {
            return '';
        }
        throw new Error('unexpected state');
    }
    renderString(context, globalContext) {
        return this._asString(context, globalContext);
    }
    renderArray(sink) {
        throw new Error('not implemented');
    }
    toString() {
        if (this.value.bIgnore) {
            return '-WS-';
        }
        if (this.value.bOptionalSimple) {
            return '(WS)';
        }
        let count = 0;
        if (this.value.nAtLeast !== undefined) {
            count = this.value.nAtLeast;
        }
        let s = '';
        for (let i = 0; i < count; i++) {
            s += '\xb7';
        }
        return s;
    }
}
exports.Whitespace = Whitespace;
Whitespace.blankRequired = /\w°[$\w@'"]|[)}\]']°\w|[\w)']°{/;
Whitespace.blankRequiredIfUserOption = {
    whitespaceWithinBrackets: /[{([]°|°[})\]]/
};
Whitespace.blankForbidden = /(x|date|time(stamp?))°'/i;
class LineBreak extends FormatBase {
    clone() {
        const cloned = new LineBreak();
        cloned.value = this.value;
        return cloned;
    }
    _asString() {
        if (this.value.bIgnore) {
            return '';
        }
        let emptyLines = 0;
        if (this.value.nAtLeast !== undefined) {
            emptyLines = this.value.nAtLeast;
        }
        return '\n'.repeat(emptyLines + 1);
    }
    renderString() {
        const s = this._asString();
        this.init();
        return s;
    }
    renderArray(sink) {
        const s = this._asString();
        this.init();
        for (const c of s) {
            sink.push([]);
        }
    }
    toString() {
        if (this.value.bIgnore) {
            return '-LF-';
        }
        if (this.value.bOptionalSimple) {
            return '(LF)';
        }
        let emptyLines = 0;
        if (this.value.nAtLeast !== undefined) {
            emptyLines = this.value.nAtLeast;
        }
        let s = '';
        for (let i = 0; i < emptyLines + 1; i++) {
            s += '\xb6';
        }
        return s;
    }
}
exports.LineBreak = LineBreak;
//# sourceMappingURL=FormattingInstructions.js.map