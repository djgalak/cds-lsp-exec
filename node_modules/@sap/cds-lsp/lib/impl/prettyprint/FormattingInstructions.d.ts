import { GlobalContext, OutputLine } from './GlobalContext';
import { PpRuleToken } from './PpRuleToken';
export declare type RenderContext = {
    precedingText: string;
    succeedingText: string;
    precedingToken?: PpRuleToken;
};
export declare const blanks: (n: number) => string;
export interface FormatValue {
    bIgnore?: boolean;
    bOptionalSimple?: boolean;
    nAtLeast?: number;
}
export declare abstract class FormatBase {
    value: FormatValue;
    constructor();
    init(): void;
    toString(): string;
    abstract renderString(context?: RenderContext, globalContext?: GlobalContext): string;
    abstract renderArray(sink: OutputLine[]): void;
    _setValue(value: FormatValue): void;
    optionalSimple(): this;
    atLeast(n: number): this;
    merge(that: FormatBase): boolean;
    protected abstract _asString(): string;
}
export declare class Whitespace extends FormatBase {
    private static blankRequired;
    private static blankRequiredIfUserOption;
    private static blankForbidden;
    protected _asString(context?: RenderContext, globalContext?: GlobalContext): string;
    renderString(context?: RenderContext, globalContext?: GlobalContext): string;
    renderArray(sink: OutputLine[]): void;
    toString(): string;
}
export declare class LineBreak extends FormatBase {
    clone(): LineBreak;
    protected _asString(): string;
    renderString(): string;
    renderArray(sink: OutputLine[]): void;
    toString(): string;
}
