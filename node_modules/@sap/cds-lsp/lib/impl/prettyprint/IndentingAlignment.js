"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Alignment_1 = require("./Alignment");
class IndentingAlignment extends Alignment_1.Alignment {
    constructor() {
        super(...arguments);
        this.relativeColumn = 0;
    }
    setRelativeAlignment(previousAlignment, relativeColumn = 0) {
        let previousCursor = previousAlignment;
        while (previousCursor) {
            if (previousCursor === this) {
                throw new Error('Cycle in relative alignments starting with ID ' + this.id);
            }
            previousCursor = previousCursor.relativeAlignment;
        }
        this.relativeAlignment = previousAlignment;
        this.relativeColumn = relativeColumn;
        return this;
    }
    getColumn(lineNumber) {
        if (this.relativeAlignment) {
            return Math.max(this.relativeColumn < 0 ? 0 : this.nMinColumn, this.relativeAlignment.getColumn(lineNumber) + this.relativeColumn);
        }
        return this.nMinColumn;
    }
    toString() {
        return `IA(${this.id})`;
    }
}
exports.IndentingAlignment = IndentingAlignment;
IndentingAlignment.forId = Alignment_1.alignmentForId((context, id) => new IndentingAlignment(context, id));
//# sourceMappingURL=IndentingAlignment.js.map