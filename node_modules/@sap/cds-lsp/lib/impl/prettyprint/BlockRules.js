"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const $ = 'start';
class RelevantRuleNames {
    constructor() {
        this.start = $;
        this.annotateElement = $;
        this.annotationAssignment_atn = $;
        this.annotationAssignment_fix = $;
        this.annotationAssignment_ll1 = $;
        this.annotationAssignment_1 = $;
        this.annotationAssignment_paren = $;
        this.annotationDef = $;
        this.arrayValue = $;
        this.artifactDef = $;
        this.condition = $;
        this.conditionTerm = $;
        this.contextDef = $;
        this.elementDef = $;
        this.elementDefInner = $;
        this.entityDef = $;
        this.expression = $;
        this.extendContext = $;
        this.innerUsing = $;
        this.mixinElementDef = $;
        this.namedValue = $;
        this.namedValueInArray = $;
        this.namespaceDeclaration = $;
        this.orderBySpec = $;
        this.projectionExclusion = $;
        this.queryExpression = $;
        this.queryTerm = $;
        this.queryPrimary = $;
        this.selectItemDef = $;
        this.tableExpression = $;
        this.typeAssociationBase = $;
        this.typeAssociationCont = $;
        this.typeAssociationElementCont = $;
        this.typeDef = $;
        this.typeRefOptArgs = $;
        this.typeSpecSemi = $;
        this.usingDeclaration = $;
        this.value = $;
        this.viewDef = $;
    }
}
exports.BlockRules = assignKeyNamesAsValueAndFreeze(new RelevantRuleNames());
function isBlockRule(s) {
    return exports.BlockRules[s] === s;
}
exports.isBlockRule = isBlockRule;
function assignKeyNamesAsValueAndFreeze(o) {
    Object.keys(new RelevantRuleNames()).forEach(k => o[k] = k);
    return Object.freeze(o);
}
//# sourceMappingURL=BlockRules.js.map