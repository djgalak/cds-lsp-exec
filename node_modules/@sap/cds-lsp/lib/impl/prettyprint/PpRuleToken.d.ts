import { AntlrToken } from './parse/AntlrTypes';
import { Category, PpParserContext } from './PpBaseTypes';
import { PpRuleNode } from './PpRuleNode';
import { IColorProvider } from './util/Logger';
import { Position, Range } from './util/TreeUtil';
export declare class PpToken {
    readonly id: string;
    private _category;
    start: number;
    private _line;
    private _column;
    private _endLine;
    private _endColumn;
    protected _tokenIndex: number;
    private _text;
    readonly originalText: string;
    private _temporaryAntlrToken;
    constructor(token: AntlrToken);
    finalizeCategory(): PpToken;
    get category(): Category;
    get line(): number;
    set line(line: number);
    get column(): number;
    set column(column: number);
    get text(): string;
    set text(text: string);
    get endLine(): number;
    get endColumn(): number;
    getStartCursor(): Position;
    getEndCursor(): Position;
    get range(): Range;
    getLowerLexem(): string;
    get tokenIndex(): number;
    ejected: boolean;
    private assureFinalized;
    isIdentifier(): boolean;
    isOperator(): boolean;
    isKeyword(): boolean;
    isComment(): boolean;
    isLineComment(): boolean;
    isBlockComment(): boolean;
    toString(): string;
    getStartOffset(): number;
    getEndOffset(): number;
    relativeToCursor(cursor: Position): 'tokenAfterCursor' | 'tokenStartsAtCursor' | 'tokenContainsCursor' | 'tokenEndsWithCursor' | 'tokenBeforeCursor';
}
export declare function rangeRelativeToCursor(range: Range, cursor: Position): 'tokenAfterCursor' | 'tokenStartsAtCursor' | 'tokenContainsCursor' | 'tokenEndsWithCursor' | 'tokenBeforeCursor';
export declare function endLine(token: AntlrToken): number;
export declare class PpRuleToken extends PpToken {
    context: PpParserContext;
    parent: PpRuleNode;
    token: AntlrToken;
    private isErrorToken;
    followUpLineEndCommentToken: PpRuleToken;
    constructor(context: PpParserContext, parent: PpRuleNode, token: AntlrToken, isErrorToken?: boolean);
    debugPrint(colorProvider: IColorProvider): string;
    getStartTokenIndex(): number;
    isInlineComment(): boolean;
    isSingleLined(): boolean;
    isFollowUpComment(): boolean;
    getFollowUpLineEndComment(): PpRuleToken;
    getPreviousToken(predicate: (token: PpRuleToken) => boolean): PpRuleToken;
    getNextToken(predicate: (token: PpRuleToken) => boolean): PpRuleToken;
    isCqlKeyword(): boolean;
}
export declare class PpCommentToken extends PpRuleToken {
    constructor(token: PpRuleToken);
}
