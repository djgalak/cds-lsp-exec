"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_1 = require("vscode-languageserver");
const CdsLanguageServer_1 = require("./CdsLanguageServer");
const InternalAnnotationHandler_1 = require("./contributions/InternalAnnotationHandler");
const utils_1 = require("./utils");
const trace_1 = require("./utils/trace");
class ServerStarter {
    start(trace = new trace_1.LspTrace(), emergencyHooks = new utils_1.EmergencyHooks(trace)) {
        trace_1.startAppScope(trace);
        trace_1.startRequestScope('BOOTSTRAP');
        const tracer = trace.tracer(trace_1.LspTraceComponent.UTIL);
        emergencyHooks.setupEmergencyHooks();
        tracer.info('Creating connection');
        const connection = this.createConnection();
        trace.setConnection(connection);
        InternalAnnotationHandler_1.registerAnnotationHandlers(this.getAnnotationHandlerNpmPackageNames());
        tracer.info('Creating server');
        const lspServer = this.createServer(trace);
        lspServer.listen(connection);
        tracer.info('Start listening');
        connection.listen();
    }
    getAnnotationHandlerNpmPackageNames() {
        var _a, _b;
        return Object.keys((_b = (_a = this.getPackageJson()) === null || _a === void 0 ? void 0 : _a.optionalDependencies) !== null && _b !== void 0 ? _b : {});
    }
    getPackageJson() {
        return require('../../package.json');
    }
    createServer(trace) {
        return new CdsLanguageServer_1.CdsLanguageServer(new utils_1.Telemetry(trace));
    }
    createConnection() {
        return vscode_languageserver_1.createConnection();
    }
}
__decorate([
    trace_1.Footprint(trace_1.LspTraceComponent.UTIL)
], ServerStarter.prototype, "getAnnotationHandlerNpmPackageNames", null);
exports.ServerStarter = ServerStarter;
//# sourceMappingURL=ServerStarter.js.map