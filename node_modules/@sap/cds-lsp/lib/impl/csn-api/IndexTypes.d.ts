/// <reference types="@sap__cds-compiler" />
import { XsnKind } from '@sap/cds-compiler';
import * as LSP from 'vscode-languageserver-protocol';
export interface NativeToken {
    text: string;
    line: number;
    column: number;
    tokenIndex: number;
}
export declare class GenericToken implements LSP.Position {
    readonly uri: string;
    constructor(token: NativeToken, uri: string);
    toString(): string;
    readonly tokenIndex: number;
    readonly text: string;
    readonly line: number;
    readonly character: number;
    annotationValue?: string;
    get range(): LSP.Range;
    get location(): LSP.Location;
    compare(position: LSP.Position): number;
}
export declare class AnnotationAssignmentToken extends GenericToken {
    readonly carrier: IdentifierToken;
    private _range;
    constructor(embeddedAnnotation: string, idToken: IdentifierToken, carrier: IdentifierToken);
    get range(): LSP.Range;
    compare(position: LSP.Position): number;
}
export declare class IdentifierToken extends GenericToken {
    private _definition;
    get definitions(): GenericDefinition | GenericDefinition[];
    addDefinition(target: GenericDefinition): void;
}
export declare class StringLiteralToken extends GenericToken {
    translationId?: string;
    isUsingPath?: boolean;
}
export declare class GenericDefinition {
    fullyQualifiedName: string;
    kind: XsnKind;
    constructor(fullyQualifiedName: string, kind: XsnKind);
    _references: Set<GenericToken>;
    addReference(ref: GenericToken): void;
    get references(): GenericToken[];
    private _annotationReferences;
    addAnnotationReference(fqn: string, annotationRef: GenericToken): void;
    annotation(fqn: string): GenericToken | GenericToken[];
    redefinitions: Set<ExplicitDefinition>;
    addRedefinition(definition: ExplicitDefinition): void;
}
export declare class ExplicitDefinition extends GenericDefinition {
    location: LSP.Location;
    nameLocation: LSP.Location;
    isExtend?: boolean;
    isMixin?: boolean;
    baseDefinitions: Set<GenericDefinition>;
    constructor(fullyQualifiedName: string, kind: XsnKind, location: LSP.Location, nameLocation: LSP.Location, isExtend?: boolean, isMixin?: boolean);
    addReference(ref: GenericToken): void;
    addBaseDefinition(baseDef: GenericDefinition): void;
}
export declare class ExplicitAlias extends ExplicitDefinition {
    baseDefinition: ExplicitDefinition | ExplicitDefinition[];
    constructor(baseDefinition: ExplicitDefinition | ExplicitDefinition[], fullyQualifiedName: string, kind: XsnKind, location: LSP.Location, nameLocation: LSP.Location, isExtend?: boolean);
}
export declare class BuiltinDefinition extends GenericDefinition {
}
export declare class FreeAnnotationDefinition extends GenericDefinition {
}
export declare type AutoCreationMode = 'create' | 'dummy' | 'warnCreate';
export declare class LocationIndex<T> {
    private _uriToPosix;
    forUri(uri: string, create?: AutoCreationMode): PositionIndex<T>;
}
export declare class PositionIndex<T> {
    private _rowToCharix;
    inRow(row: number, create?: AutoCreationMode): CharacterIndex<T>;
    at(position: LSP.Position): T;
    add(t: T, position: {
        line: number;
        character: number;
    }): void;
    all(): T[];
}
declare class CharacterIndex<T> {
    private _characterToT;
    atCharacter(startCharacter: number): T;
    all(): T[];
    add(t: T, position: {
        character: number;
    }): void;
}
export declare function sortLocations<T>(items: T[], getLocation: (item: T) => LSP.Location): T[];
export declare function sortAndUniqueLocations<T>(items: T[], getLocation: (item: T) => LSP.Location): T[];
export declare function compareLocations(loc1: LSP.Location, loc2: LSP.Location): number;
export declare function comparePosition(pos1: LSP.Position, pos2: LSP.Position): number;
export {};
