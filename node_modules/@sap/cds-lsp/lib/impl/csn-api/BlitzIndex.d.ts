/// <reference types="@sap__cds-compiler" />
import { WorkspaceDocuments, XsnCompileModel } from '@sap/cds-compiler';
import * as LSP from 'vscode-languageserver-protocol';
import { Adapter } from '../utils';
import { AnnotationAssignmentToken, AutoCreationMode, BuiltinDefinition, ExplicitDefinition, FreeAnnotationDefinition, GenericDefinition, GenericToken, IdentifierToken, PositionIndex, StringLiteralToken } from './IndexTypes';
export declare function allDefinitions(def: GenericDefinition | GenericDefinition[]): Set<GenericDefinition>;
export declare function flatten<T>(x: T | T[]): T[];
export declare class FileIndex {
    _definitions: PositionIndex<ExplicitDefinition>;
    idTokens: IdentifierToken[];
    i18nTokens: StringLiteralToken[];
    stringTokens: StringLiteralToken[];
    compilerMessages: LSP.Diagnostic[];
    directDependentUris: string[];
    statistics: Statistics;
    private _annotationAssignments;
    addAnnotationAssignment(location: LSP.Location, embeddedAnnotation: string, carrier: IdentifierToken): void;
    get annotationAssignments(): IterableIterator<AnnotationAssignmentToken>;
}
declare class Statistics {
    tokenCount: number;
    identifiers: number;
    definitions: number;
    references: number;
    translations: number;
    messages: number;
    directDependencies: number;
}
export declare class BlitzIndex {
    _mainUri: string;
    workspaceVersion: number;
    static build(mainUri: string, workspaceDocuments: WorkspaceDocuments, model: XsnCompileModel, workspaceVersion: number, adapter: Adapter): BlitzIndex;
    constructor(_mainUri: string, workspaceVersion: number);
    isInvalid: boolean;
    getTransitiveDependencies(uri: string): Set<string>;
    private _transitiveDependencies;
    private _fqnToBuiltinDef;
    private _fqnToAnnotation;
    exceptions: any[];
    private _mainStatistics;
    private _uriToFileIndex;
    forUri<T>(uri: string, create?: AutoCreationMode): FileIndex;
    get builtUris(): string[];
    get stats(): string;
    correspondingDefinition(def: GenericDefinition): GenericDefinition;
    definitionAt(uri: string, position: LSP.Position): GenericDefinition | undefined;
    definitionFor(fqn: string): BuiltinDefinition | FreeAnnotationDefinition | undefined;
    getOwnDefinitions(uri: string): ExplicitDefinition[];
    identifierAt(uri: string, position: LSP.Position): IdentifierToken | undefined;
    stringAt(uri: string, position: LSP.Position): StringLiteralToken | undefined;
    correspondingStringTokens(text: string): any[];
}
export declare function findToken<T extends GenericToken>(tokens: T[], position: LSP.Position | number, start?: number, end?: number): T;
export declare function toSymbolInfo(def: ExplicitDefinition): LSP.SymbolInformation;
export declare function shortName(def: GenericDefinition, segments?: string[]): string;
export declare function binSearch<T, U>(a: T[], x: U, compare: (el: T, x: U) => number, start?: number, end?: number): T | undefined;
export {};
