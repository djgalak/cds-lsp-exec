"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const trace_1 = require("../utils/trace");
exports.ANNOTATION_HANDLERS = Symbol('ANNOTATION_HANDLERS');
const traceAndReturn = (res) => (errorKind, e, prefix, tracer, thisArg) => {
    tracer.warn(`${prefix} AnnotationHandler<${thisArg.name}> => ${e.stack || e}`);
    return res;
};
class InternalAnnotationHandler {
    constructor(name, description, external) {
        this.name = name;
        this.description = description;
        this.external = external;
    }
    async fetchAnnotationDiagnostics(uri, ast, relativeLocalPath) {
        var _a, _b;
        return (_b = await ((_a = this.external) === null || _a === void 0 ? void 0 : _a.fetchAnnotationDiagnostics(uri, ast, relativeLocalPath))) !== null && _b !== void 0 ? _b : [];
    }
    async fetchCompletionItems(cursorPosition, ast, relativeLocalPath) {
        var _a, _b;
        return (_b = await ((_a = this.external) === null || _a === void 0 ? void 0 : _a.fetchCompletionItems(cursorPosition, ast, relativeLocalPath))) !== null && _b !== void 0 ? _b : [];
    }
    async fetchHover(cursorPosition, annotation, index) {
        var _a;
        return (_a = this.external) === null || _a === void 0 ? void 0 : _a.fetchHover(cursorPosition, annotation, index);
    }
}
__decorate([
    trace_1.Footprint(trace_1.LspTraceComponent.UTIL, { argumentsRenderer: args => args[0], errorHandler: traceAndReturn([]) })
], InternalAnnotationHandler.prototype, "fetchAnnotationDiagnostics", null);
__decorate([
    trace_1.Footprint(trace_1.LspTraceComponent.UTIL, { argumentsRenderer: args => args[0], errorHandler: traceAndReturn([]) })
], InternalAnnotationHandler.prototype, "fetchCompletionItems", null);
__decorate([
    trace_1.Footprint(trace_1.LspTraceComponent.UTIL, { argumentsRenderer: args => args[0], errorHandler: traceAndReturn(undefined) })
], InternalAnnotationHandler.prototype, "fetchHover", null);
exports.InternalAnnotationHandler = InternalAnnotationHandler;
function registerAnnotationHandlers(handlerPackageNames) {
    const appScope = trace_1.currentFrame().appScope;
    if (!appScope.iocFactory) {
        appScope.iocFactory = new trace_1.IoCFactory();
    }
    const tracer = trace_1.currentTrace().tracer(trace_1.LspTraceComponent.UTIL);
    function areAnnotationHandlers(packageNames) {
        return (packageNames.length && typeof packageNames[0] !== 'string');
    }
    function isPotentialAnnotationExtension(handlerPackageName) {
        const modulePath = require.resolve(handlerPackageName);
        const content = fs.readFileSync(modulePath, 'utf8');
        const lines = content.split(/\r?\n/);
        for (const line of lines) {
            if (line.match(/['"]?cdsLspContributionKind['"]?\s*:\s*['"]annotation['"]/)) {
                return true;
            }
        }
        return false;
    }
    if (!areAnnotationHandlers(handlerPackageNames)) {
        const validHandlers = (x) => !!x;
        appScope.iocFactory.register(exports.ANNOTATION_HANDLERS, () => handlerPackageNames.map((handlerPackageName) => {
            try {
                if (!isPotentialAnnotationExtension(handlerPackageName))
                    return undefined;
                const pkg = require(path.join(handlerPackageName, 'package.json'));
                const handler = require(handlerPackageName);
                if (handler.cdsLspContributionKind !== 'annotation')
                    return undefined;
                return new InternalAnnotationHandler(pkg.name, pkg.description, handler);
            }
            catch (e) {
                tracer.warn(`Failed to load annotation handler ${handlerPackageName}: ${e}`);
                return undefined;
            }
        }).filter(validHandlers));
    }
    else {
        appScope.iocFactory.register(exports.ANNOTATION_HANDLERS, () => handlerPackageNames.map(handler => new InternalAnnotationHandler('', '', handler)));
    }
}
exports.registerAnnotationHandlers = registerAnnotationHandlers;
//# sourceMappingURL=InternalAnnotationHandler.js.map