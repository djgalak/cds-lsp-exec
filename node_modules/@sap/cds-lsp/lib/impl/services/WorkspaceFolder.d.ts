/// <reference types="@sap__cds-compiler" />
import { WorkspaceDocuments, XsnCompileModel } from '@sap/cds-compiler';
import * as LSP from 'vscode-languageserver-protocol';
import { BlitzIndex } from '../csn-api';
import { ICompiler } from '../model/Compiler';
import { Adapter, CdxTextDocuments, ILspOptions, ITranslationBroker, WorkspaceValidationMode } from '../utils';
import { ExtractedCdsEnv } from '../utils/cdsenv';
import { ITracer } from '../utils/trace';
import { DocumentationProvider } from './DocumentationProvider';
import { IWorkspaceFolder, IWorkspaceService } from './IWorkspaceInterfaces';
import { SendDiagnosticsProvider } from './ValidationState';
import { WorkspaceDiagnostics } from './WorkspaceDiagnostics';
export declare class WorkspaceFolder implements IWorkspaceFolder {
    name: string;
    protected compiler: ICompiler;
    private options;
    private fileTracer;
    protected tracer: ITracer;
    private modelTracer;
    protected _openDocuments: CdxTextDocuments;
    readonly translationBroker: ITranslationBroker;
    diagnostics: WorkspaceDiagnostics;
    documentationProvider: DocumentationProvider;
    get workspaceScanned(): boolean;
    set workspaceScanned(value: boolean);
    workspaceDocuments: WorkspaceDocuments;
    private _workspaceScanned;
    adapter: Adapter;
    get workspaceUri(): string;
    get workspaceRoot(): string;
    constructor(workspaceRootUri: string, name: string, compiler: ICompiler, sendDiagnosticsProvider?: SendDiagnosticsProvider, options?: ILspOptions, localRoot?: string);
    onWorkspaceChanged(urisChanged?: string[]): Promise<{
        [uri: string]: LSP.Diagnostic[];
    }>;
    onDidOpenTextDocument(params: LSP.DidOpenTextDocumentParams): Promise<{
        [uri: string]: LSP.Diagnostic[];
    }>;
    onDidChangeTextDocument(params: LSP.DidChangeTextDocumentParams): Promise<LSP.Diagnostic[]>;
    onDidCloseTextDocument(params: LSP.DidCloseTextDocumentParams): void;
    getOpenFiles(workspaceRootUri: string): WorkspaceDocuments;
    getResponsibilityScore(uriOrLocalPath: string): number;
    private mixLocalAndDirtyFiles;
    calculateUrisToValidate(urisChanged?: string[]): Promise<{
        urisToValidate: string[];
        fullBuild: boolean;
    }>;
    fetchSourceFiles(validationMode?: WorkspaceValidationMode): Promise<WorkspaceDocuments>;
    fetchPackageJsonFiles(validationMode?: WorkspaceValidationMode): Promise<WorkspaceDocuments>;
    protected _getFiles(validationMode?: WorkspaceValidationMode): Promise<WorkspaceDocuments>;
    dependencyLevel(uri: string): number;
    __scanForSources(workspaceRoot: string, workspaceDocuments: WorkspaceDocuments): Promise<void>;
    protected _scanFolderForSources(): Promise<void>;
    private updateWorkspaceDocuments;
    protected readContent(uri: string, prefix?: string): string;
    protected checkRootExists(): void;
    private _indexByUri;
    private isDirtyIndex;
    private findDirtyUris;
    private _taskManager;
    private _envTaskManager;
    private rebuildDirtyIndexes;
    protected buildIndex(uri: string, workspaceVersion: number): Promise<BlitzIndex>;
    protected getAdapter(fileUri: string): Adapter;
    _cachedCdsEnv: ExtractedCdsEnv;
    fetchCdsEnv(): Promise<ExtractedCdsEnv>;
    protected _fetchCdsEnv(): Promise<ExtractedCdsEnv>;
    fetchIndex(uri: string): Promise<BlitzIndex>;
    fetchAst(localPath: string): Promise<XsnCompileModel>;
    compileFile(localPath: string): Promise<XsnCompileModel>;
    protected getWorkspaceRoot(localFilePath: string): string;
    onDidChangeWatchedFiles(params: LSP.DidChangeWatchedFilesParams): Promise<void>;
    private updateFileCache;
    markWorkspaceAsDirty(): void;
    onWorkspaceFolderChanged(urisChanged?: string[]): Promise<{
        [uri: string]: LSP.Diagnostic[];
    }>;
    private _workspaceVersion;
    private invalidateIndex;
    private validateFile;
}
export declare const isOutsider: (wsf: WorkspaceFolder) => boolean;
export declare const isUntitled: (wsf: WorkspaceFolder) => boolean;
export declare const isRealWorkspaceFolder: (wsf: WorkspaceFolder) => boolean;
export declare class OutsiderWorkspaceFolder extends WorkspaceFolder {
    private workspaceService;
    constructor(compiler: ICompiler, workspaceService: IWorkspaceService, sendDiagnosticsProvider: SendDiagnosticsProvider);
    get workspaceScanned(): boolean;
    set workspaceScanned(value: boolean);
    protected checkRootExists(): void;
    protected _fetchCdsEnv(): Promise<ExtractedCdsEnv>;
}
export declare class UntitledWorkspaceFolder extends WorkspaceFolder {
    private workspaceService;
    constructor(compiler: ICompiler, workspaceService: IWorkspaceService, sendDiagnosticsProvider: SendDiagnosticsProvider);
    protected checkRootExists(): void;
    get workspaceScanned(): boolean;
    set workspaceScanned(value: boolean);
    fetchSourceFiles(validationMode?: WorkspaceValidationMode): Promise<WorkspaceDocuments>;
    protected _fetchCdsEnv(): Promise<ExtractedCdsEnv>;
    dependencyLevel(uri: string): number;
    protected getWorkspaceRoot(localFilePath: string): string;
    protected getAdapter(fileUri: string): Adapter;
}
export declare function fetchCdsEnvRaw(workspaceRoot: string, tracer?: ITracer): Promise<any>;
