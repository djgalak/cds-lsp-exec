"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const trace_1 = require("../utils/trace");
exports.CLEAN_HASH = '<clean>';
class ValidationState {
    constructor(sendDiagnosticsProvider = { sendDiagnostics: () => undefined }) {
        this.sendDiagnosticsProvider = sendDiagnosticsProvider;
        this.compiledFiles = utils_1.empty();
        this.tracer = trace_1.currentTrace().tracer(trace_1.LspTraceComponent.WORKSPACE);
    }
    updateFile(uri, compiledFile, currentWorkspaceVersion) {
        const previousState = this.compiledFiles[uri];
        if (previousState && compiledFile && previousState.workspaceVersion > compiledFile.workspaceVersion) {
            this.tracer.warn(() => `updateFile #${compiledFile.workspaceVersion} for ${uri} outdated. Already processed #${previousState.workspaceVersion}`);
            return null;
        }
        const previousHash = previousState ? previousState.diagnosticsHash : exports.CLEAN_HASH;
        const newHash = compiledFile ? compiledFile.diagnosticsHash : exports.CLEAN_HASH;
        try {
            if (previousHash !== newHash) {
                this.tracer.verbose(() => `new hash [${uri}]: `, newHash);
                const params = {
                    uri,
                    diagnostics: newHash === exports.CLEAN_HASH
                        ? []
                        : compiledFile.diagnostics
                };
                if (utils_1.isCdsSourceFile(uri)) {
                    this.sendDiagnosticsProvider.sendDiagnostics(params);
                }
                return params;
            }
            return null;
        }
        finally {
            if (compiledFile) {
                this.compiledFiles[uri] = compiledFile;
            }
            else {
                delete this.compiledFiles[uri];
            }
        }
    }
}
__decorate([
    trace_1.Footprint(trace_1.LspTraceComponent.WORKSPACE, {
        argumentsRenderer: args => `${args[0]}, ${utils_1.renderCompiledFile(args[1])}`,
        resultRenderer: r => r ? '{...}' : ''
    })
], ValidationState.prototype, "updateFile", null);
exports.ValidationState = ValidationState;
//# sourceMappingURL=ValidationState.js.map