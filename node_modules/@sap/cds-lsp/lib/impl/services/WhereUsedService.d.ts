import * as LSP from 'vscode-languageserver-protocol';
import { CdsHover } from '../../api/contributions/IAnnotationContribution';
import { BlitzIndex, GenericToken } from '../csn-api';
import { ILspOptions, PathResolver } from '../utils';
import { ModuleLoader } from '../utils/cdsenv';
import { WorkspaceFolder } from './WorkspaceFolder';
import { WorkspaceService } from './WorkspaceService';
export declare class WhereUsedService {
    private _options;
    private workspaceService;
    private requestTracer;
    private annotationHandlers;
    constructor(_options: ILspOptions, workspaceService: WorkspaceService);
    private fetchAllDefinitions;
    onDefinition(params: LSP.TextDocumentPositionParams): Promise<LSP.Location[]>;
    private fetchTranslation;
    protected fetchWorkspaceFolderAndIndex(uri: string): Promise<[WorkspaceFolder, BlitzIndex]>;
    onDocumentHighlight(params: LSP.TextDocumentPositionParams): Promise<LSP.DocumentHighlight[]>;
    onDocumentLinks(params: LSP.DocumentLinkParams): Promise<LSP.DocumentLink[] | undefined | null>;
    protected pathResolver: PathResolver;
    protected moduleLoader: ModuleLoader;
    onDocumentLinkResolve(params: LSP.DocumentLink): Promise<LSP.DocumentLink>;
    onDocumentSymbol(params: LSP.DocumentSymbolParams): Promise<LSP.SymbolInformation[]>;
    onHover(params: LSP.TextDocumentPositionParams): Promise<CdsHover>;
    fetchToken(uri: string, position: LSP.Position, fetchAnnotationToken?: boolean): Promise<ResolvedSymbol>;
    private fetchIndexes;
    onReferences(params: LSP.ReferenceParams): Promise<LSP.Location[]>;
    onWorkspaceSymbol(params: LSP.WorkspaceSymbolParams): Promise<LSP.SymbolInformation[]>;
    _onWorkspaceSymbol(workspaceFolder: WorkspaceFolder, uri: string, index: BlitzIndex, params: LSP.WorkspaceSymbolParams): Promise<LSP.SymbolInformation[]>;
}
interface ResolvedSymbol {
    token?: GenericToken;
    workspaceFolder?: WorkspaceFolder;
}
export declare function mergeHovers(hovers: CdsHover[]): CdsHover | undefined;
export {};
