"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const StringUtil_1 = require("../../prettyprint/util/StringUtil");
const utils_1 = require("../../utils");
const trace_1 = require("../../utils/trace");
class PropertiesIndex extends utils_1.I18nIndex {
    index(cdsEnv, content) {
        this.content = content;
        const compileUnicode = (raw) => raw.replace(/\\u[\dA-F]{4}/gi, match => String.fromCharCode(parseInt(match.replace(/\\u/g, ''), 16)));
        const map = new Map();
        if (content) {
            content
                .split(StringUtil_1.NEWLINE_REGEX)
                .forEach((line, lineNumber) => {
                const trimmed = line.trim();
                if (trimmed.length && !trimmed.startsWith('#')) {
                    const [key, val] = trimmed.split(/\s*=\s*/);
                    if (key && val) {
                        map.set(key, {
                            id: key,
                            text: compileUnicode(val),
                            uri: this.uri,
                            line: lineNumber,
                            character: line.indexOf('=') + 1
                        });
                    }
                }
            });
        }
        this.map = map;
    }
    createEntry(cdsEnv, tID, translationType) {
        const findInsertionLine = () => {
            for (const translation of this.entries) {
                if (translation.id.localeCompare(tID) > 0) {
                    const line = translation.line;
                    if (line > 0) {
                        if (this.content.split(StringUtil_1.NEWLINE_REGEX)[line - 1].trim().startsWith('#')) {
                            return line - 1;
                        }
                    }
                    return line;
                }
            }
            return 999999;
        };
        const line = findInsertionLine();
        const character = 0;
        return [{
                range: { start: { line, character }, end: { line, character } },
                newText: `#${translationType}\n${tID}=${utils_1.ADD_TEXT_HERE}\n\n`,
            }];
    }
}
__decorate([
    trace_1.Footprint(trace_1.LspTraceComponent.DOCUMENTATION, {
        argumentsRenderer: args => args[1],
        resultRenderer: (voidRes, args, thisArg) => `${thisArg.map.size} entries`
    })
], PropertiesIndex.prototype, "index", null);
exports.PropertiesIndex = PropertiesIndex;
//# sourceMappingURL=PropertiesIndex.js.map