import * as LSP from 'vscode-languageserver-protocol';
import { ICompiler } from '../../model/Compiler';
import { ILspOptions, TextLines } from '../../utils';
import { IWorkspaceService } from '../IWorkspaceInterfaces';
import { DocumentationProposals } from './DocumentationProposals';
export declare class CompletionService {
    readonly _lspOptions: ILspOptions;
    readonly workspaceService: IWorkspaceService;
    private compiler;
    isStrictCompletions: boolean;
    private readonly tracer;
    readonly documentationProposals: DocumentationProposals;
    private readonly proposalProviders;
    constructor(_lspOptions: ILspOptions, workspaceService: IWorkspaceService, compiler: ICompiler);
    onCompletion(textDocumentPosition: LSP.TextDocumentPositionParams): Promise<LSP.CompletionList>;
    onCompletionResolve(item: LSP.CompletionItem): LSP.CompletionItem;
    matchesPrefix(caseInsensitive: boolean, prefix: string, ...namesToCheck: string[]): boolean;
    private prepareContent;
    private fetchCompletionContext;
    getCompletionItems(textDocumentPosition: LSP.TextDocumentPositionParams): Promise<LSP.CompletionItem[]>;
    private readonly keywordErrorProvoker;
    private readonly defaultParseOptions;
    private fetchPossibleKeywords;
    private compileWithInlay;
    private static readonly identifierRule;
    private static readonly dottedIdentifier;
    private static isIdentifierSegment;
    static getPrefixAndSuffix(textLines: TextLines, cursorPosition: LSP.Position): {
        prefix: string;
        suffix: string;
    };
}
