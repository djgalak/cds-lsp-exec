import * as LSP from 'vscode-languageserver-protocol';
import { ILanguageServer } from '../ICdsLanguageServer';
import { ICompiler } from '../model/Compiler';
import { ILspOptions } from '../utils';
import { IWorkspaceService } from './IWorkspaceInterfaces';
import { WorkspaceFolder } from './WorkspaceFolder';
export declare class WorkspaceService implements IWorkspaceService {
    lspServer: ILanguageServer;
    options: ILspOptions;
    private _workspaceFolders;
    private tracer;
    private _quickFixes;
    constructor(lspServer: ILanguageServer, options: ILspOptions);
    get workspaceFolders(): WorkspaceFolder[];
    _addWorkspaceFolder(workspaceProvider: WorkspaceFolder): void;
    addWorkspaceFolder(workspaceFolderConfig: LSP.WorkspaceFolder, compiler: ICompiler): WorkspaceFolder;
    createWorkspaceFolders(workspaceFoldersConfig: LSP.WorkspaceFolder[], compiler: ICompiler): void;
    removeWorkspaceFolder(rootUri: string): void;
    private uriOrLocalPathToWorkspaceFolder;
    getWorkspaceFolder(uriOrLocalPath: string): WorkspaceFolder;
    onDidOpenTextDocument(params: LSP.DidOpenTextDocumentParams): Promise<{
        [uri: string]: LSP.Diagnostic[];
    }>;
    onDidChangeTextDocument(params: LSP.DidChangeTextDocumentParams): Promise<LSP.Diagnostic[]>;
    onDidCloseTextDocument(params: LSP.DidCloseTextDocumentParams): void;
    onCodeAction(params: LSP.CodeActionParams): Promise<LSP.Command[]>;
    onExecuteCommand(params: LSP.ExecuteCommandParams): Promise<any>;
    onDidSaveTextDocument(params: LSP.DidSaveTextDocumentParams): void;
    onWillSaveTextDocument(params: LSP.WillSaveTextDocumentParams): void;
    onWillSaveTextDocumentWaitUntil(params: LSP.WillSaveTextDocumentParams): LSP.TextEdit[];
    onDidChangeWatchedFiles(params: LSP.DidChangeWatchedFilesParams): Promise<void>;
    requestWorkspaceScan(folder: string): void;
}
