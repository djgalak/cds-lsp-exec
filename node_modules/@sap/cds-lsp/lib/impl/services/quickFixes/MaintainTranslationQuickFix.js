"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const StringUtil_1 = require("../../prettyprint/util/StringUtil");
const utils_1 = require("../../utils");
const TranslationUtils_1 = require("../translation/TranslationUtils");
const QuickFixCommands_1 = require("./QuickFixCommands");
class MaintainTranslationQuickFix extends QuickFixCommands_1.QuickFixHandler {
    async handleMaintainTranslation(params) {
        const { translationFileUri, tID, translationType, doCreateTranslationFile } = params.arguments[0];
        const documentChanges = [];
        if (doCreateTranslationFile) {
            const createFile = {
                uri: translationFileUri,
                kind: 'create'
            };
            documentChanges.push(createFile);
        }
        const workspaceFolder = this.lspServer.workspaceService.getWorkspaceFolder(translationFileUri);
        const tIndex = await workspaceFolder.translationBroker.fetchTranslationIndex(translationFileUri);
        const cdsEnv = await workspaceFolder.fetchCdsEnv();
        const edits = tIndex.createEntry(cdsEnv, tID, translationType);
        const addTranslationPair = {
            textDocument: { uri: translationFileUri, version: 0 },
            edits
        };
        documentChanges.push(addTranslationPair);
        await this.lspServer.applyWorkspaceEdits({
            label: `Maintain translation for '${tID}'`,
            edit: {
                documentChanges
            }
        });
    }
    async createCommands(params) {
        const commands = [];
        const unresolvedTranslations = params.context.diagnostics.filter(diagnostic => diagnostic.code.toString().startsWith(utils_1.ErrorCodes.NO_TRANSLATION_TEXT));
        if (unresolvedTranslations.length) {
            const uri = params.textDocument.uri;
            const workspaceFolder = this.lspServer.workspaceService.getWorkspaceFolder(uri);
            const sourceFiles = await workspaceFolder.fetchSourceFiles();
            const sourceContent = sourceFiles[uri];
            const lines = sourceContent.split(StringUtil_1.NEWLINE_REGEX);
            if (this.lspServer.workspaceService.options.getClientCapability(utils_1.ClientCapability.WORKSPACEEDIT_DOCUMENTCHANGES, false)) {
                const tUris = await this.lspServer.workspaceService.getWorkspaceFolder(uri).translationBroker.fetchMostRelevantTranslationFileUris(uri);
                if (tUris === null || tUris === void 0 ? void 0 : tUris.length) {
                    const translationFileUri = tUris[0];
                    const getTranslationType = (diagnostic) => {
                        const tagName = diagnostic.code.toString().slice(utils_1.ErrorCodes.NO_TRANSLATION_TEXT.length + 1);
                        switch (tagName) {
                            case 'title': return 'XTIT';
                            case 'description': return 'XTOL';
                            default: return 'XMSG';
                        }
                    };
                    commands.push(...unresolvedTranslations.map((diagnostic) => {
                        const translationType = getTranslationType(diagnostic);
                        const lineNo = diagnostic.range.start.line;
                        const line = lines[lineNo];
                        const x = line.slice(line.lastIndexOf('{', diagnostic.range.start.character));
                        const tID = TranslationUtils_1.getTranslationId(x);
                        const args = [{
                                sourceFileUri: uri,
                                translationFileUri,
                                tID,
                                translationType,
                                doCreateTranslationFile: !fs.existsSync(utils_1.toLocalPath(translationFileUri))
                            }];
                        const command = {
                            arguments: args,
                            command: QuickFixCommands_1.QuickFixCommands.MAINTAIN_TRANSLATION,
                            title: `Maintain translation text for ID '${tID}'`
                        };
                        return command;
                    }).filter(command => command.arguments[0].tID));
                }
            }
        }
        return commands;
    }
    async execute(params) {
        return this.handleMaintainTranslation(params);
    }
}
exports.MaintainTranslationQuickFix = MaintainTranslationQuickFix;
//# sourceMappingURL=MaintainTranslationQuickFix.js.map