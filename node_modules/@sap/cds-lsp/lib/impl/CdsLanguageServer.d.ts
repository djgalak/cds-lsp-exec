import * as LS from 'vscode-languageserver';
import * as LSP from 'vscode-languageserver-protocol';
import { ILanguageServer } from './ICdsLanguageServer';
import { Compiler } from './model/Compiler';
import { CompletionService } from './services/completion';
import { FormattingService } from './services/FormattingService';
import { RefactoringService } from './services/refactor/RefactoringService';
import { WhereUsedService } from './services/WhereUsedService';
import { WorkspaceService } from './services/WorkspaceService';
import { CdsDidChangeConfigurationParams, LspOptions, Telemetry } from './utils';
import { ITracer, LspTraceLevel } from './utils/trace';
export declare class CdsLanguageServer implements ILanguageServer {
    private telemetry?;
    protected connection: LS.Connection | undefined;
    completionService: CompletionService;
    whereUsedService: WhereUsedService;
    workspaceService: WorkspaceService;
    refactoringService: RefactoringService;
    formattingService: FormattingService;
    options: LspOptions;
    compiler: Compiler;
    protected trace: import("./utils/trace").ITrace;
    private requestTracer;
    constructor(telemetry?: Telemetry);
    listen(connection: LS.Connection): void;
    protected getWorkspaceFoldersConfig(params: LSP.InitializeParams): LSP.WorkspaceFolder[];
    protected get serverCapabilities(): LSP.InitializeResult;
    onInitialize(params: LSP.InitializeParams): LSP.InitializeResult;
    protected getLspSettingsPath(): string;
    protected getWorkspaceSettingsPath(): string | undefined;
    onInitialized(): Promise<void>;
    protected updateWatchRegistration(): Promise<void>;
    private registrations;
    private readSettings;
    protected onDidChangeWorkspaceFolders(changes: LSP.WorkspaceFoldersChangeEvent): Promise<void>;
    onDidChangeConfiguration(params: CdsDidChangeConfigurationParams): Promise<void>;
    protected mergeConfigParams(...paramsS: CdsDidChangeConfigurationParams[]): CdsDidChangeConfigurationParams;
    protected _onDidChangeConfiguration(...paramsS: CdsDidChangeConfigurationParams[]): Promise<void>;
    onShutdown(): void;
    onExit(): void;
    sendDiagnostics(params: LSP.PublishDiagnosticsParams): void;
    applyWorkspaceEdits(params: LSP.ApplyWorkspaceEditParams): Promise<any>;
    userPopup(level: LspTraceLevel, message: string, ...buttons: string[]): Promise<string>;
}
export declare function mergeJSONs(target?: any, add?: {}, baseFqn?: string, tracer?: ITracer): any;
